## ams_version=1.0

Model Main_ValueDynamicIdentifier {
    Parameter p_SourceParameter1;
    Parameter p_SourceParameter2;
    ElementParameter ep_SelectedSourceIdentifier {
        Range: AllIdentifiers;
    }
    Parameter p_TargetValue;
    DeclarationSection MEF_Declarations {
        ElementParameter ep_RuntimeLibrary {
            Range: AllIdentifiers;
        }
        ElementParameter ep_RuntimeProcedure {
            Range: AllIdentifiers;
            Default: 'pr_DummyProcedure';
        }
        StringParameter sp_RuntimeProcedureBody;
    }
    Procedure pr_DummyProcedure;
    Procedure pr_GetValueOfIdentifer {
        Arguments: (ep_Source,ep_Target);
        Body: {
            !If there already exists an identifier with the name
            !RuntimeLibrary, we must delete it first
            if "RuntimeLibrary" in AllIdentifiers then
            	me::Delete('RuntimeLibrary') ;
            endif ;
            
            !Now we create the runtime library
            ep_RuntimeLibrary := me::CreateLibrary( libraryName : "RuntimeLibrary" , prefixName  : "rtl") ;
            
            !Now we create the runtime procedure
            ep_RuntimeProcedure := me::Create(
            	name     : "prRuntimeProcedure" ,
            	newType  : 'Procedure' ,
            	parentId : ep_RuntimeLibrary ,
            	pos      : 0 ) ;
            
            !Now that we have the runtime procedure identifier, we can
            !create the body for this procedure
            !
            !What we would like to have as the code for this procedure is :
            !   ep_Target := ep_Source
            !In the current procedure we know the name of the identifier
            !denoted by epSource and epTarget, so we can create the body as follows:
            sp_RuntimeProcedureBody := ep_Target + " := " + ep_Source + " ; \n" ;
            
            !Now set the body of the runtime procedure
            me::SetAttribute(
            	runtimeId : ep_RuntimeProcedure ,
            	attr      : 'body' ,
            	txt       : sp_RuntimeProcedureBody ) ;
            
            !Now compile the runtime library
            me::Compile( ep_RuntimeLibrary ) ;
            
            !And run the procedure via the apply statement
            apply(ep_RuntimeProcedure) ;
        }
        ElementParameter ep_Source {
            Range: AllIdentifiers;
            Property: Input;
        }
        ElementParameter ep_Target {
            Range: AllIdentifiers;
            Property: Input;
        }
    }
    Procedure MainInitialization {
        Comment: "Add initialization statements here that do NOT require any library being initialized already.";
    }
    Procedure PostMainInitialization {
        Comment: {
            "Add initialization statements here that require that the libraries are already initialized properly,
            or add statements that require the Data Management module to be initialized."
        }
    }
    Procedure MainExecution {
        Body: {
            p_SourceParameter1 := 5 ;
            ep_SelectedSourceIdentifier := 'p_SourceParameter1' ;
            
            pr_GetValueOfIdentifer(ep_SelectedSourceIdentifier,'p_TargetValue');
            
            dialogmessage("Value = " + p_TargetValue) ;
        }
    }
    Procedure PreMainTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that require all libraries to be still alive.
            Return 1 if you allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence."
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that do not require all libraries to be still alive.
            Return 1 to allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence.
            It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
        }
    }
}
