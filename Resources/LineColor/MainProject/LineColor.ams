## ams_version=1.0

Model Main_LineColor {
    Parameter p_NoLlines {
        InitialData: 67;
    }
    Set s_Points {
        SubsetOf: Integers;
        Index: i_P;
        Definition: ElementRange(0,9);
    }
    Set s_Lines {
        SubsetOf: Integers;
        Index: i_l;
        Definition: ElementRange(1,p_NoLlines);
    }
    Set s_SomeLines {
        SubsetOf: s_Lines;
        Index: i_sl;
        Definition: {
            { i_l | mod( i_l, 3) = 1 }
        }
    }
    Parameter p_Dat {
        IndexDomain: (i_l,i_p);
    }
    Parameter p_SomeDat {
        IndexDomain: (i_sl,i_P);
        Definition: p_Dat(i_sl, i_P);
        webui::AnnotationsIdentifier: sp_AnnoSome;
    }
    StringParameter sp_AnnoSome {
        IndexDomain: (i_sl,i_p);
        Definition: {
            FormatString("sbc-color%i",
            	mod(ord(i_sl,s_SomeLines)-1,
            	sbc::p_NoColorsPerPalet(ep_Palet))+1)
        }
    }
    Parameter p_lc_max {
        Definition: p_NoLlines + 2;
    }
    Parameter p_lc_min {
        Definition: -2;
    }
    ElementParameter ep_Widget {
        Range: sbc::s_Widgets;
    }
    ElementParameter ep_Palet {
        Range: sbc::s_Palets;
    }
    Procedure Test {
        Body: {
            ep_Widget := StringToElement( sbc::s_Widgets, "Linechart", create:0 );
            if not ep_Widget then raise error "dunno lines" ; endif ;
            
            !ep_Palet := StringToElement( sbc::s_Palets, "Default19", create:0 );
            !ep_Palet := StringToElement( sbc::s_Palets, "Qualitative7", create:0 );
            ep_Palet := StringToElement( sbc::s_Palets, "Qualitative11", create:0 );
            if not ep_Palet then raise error "dunno Default19" ; endif ;
            
            sbc::pr_GenerateCSSFile(
            	sp_Filename   :  "test", 
            	sp_WidgetName :  "Home_Linechart_SomeDat", 
            	ep_WidgetType : ep_Widget , 
            	ep_Palet      : ep_Palet );
        }
    }
    Procedure MainInitialization {
        Comment: "Add initialization statements here that do NOT require any library being initialized already.";
    }
    Procedure PostMainInitialization {
        Body: {
            p_Dat(i_l, i_P) := i_l ;
            
            ep_Widget := StringToElement( sbc::s_Widgets, "Linechart", create:0 );
            if not ep_Widget then raise error "dunno lines" ; endif ;
            
            !ep_Palet := StringToElement( sbc::s_Palets, "Default19", create:0 );
            ep_Palet := StringToElement( sbc::s_Palets, "Qualitative7", create:0 );
            if not ep_Palet then raise error "dunno Default19" ; endif ;
        }
        Comment: {
            "Add initialization statements here that require that the libraries are already initialized properly,
            or add statements that require the Data Management module to be initialized."
        }
    }
    Procedure MainExecution;
    Procedure PreMainTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that require all libraries to be still alive.
            Return 1 if you allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence."
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that do not require all libraries to be still alive.
            Return 1 to allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence.
            It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
        }
    }
}
