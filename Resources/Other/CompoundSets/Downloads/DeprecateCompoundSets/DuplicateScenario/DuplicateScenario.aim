
LIBRARYMODULE DataDuplicator
  prefix    :  dd
  interface :  DataDuplicator

  DECLARATION SECTION 

  ENDSECTION  ;

  PROCEDURE
    identifier :  CopySelectedData
    arguments  :  (existingElement,newElement,eElemRange,processedIdentifiers)

    DECLARATION SECTION Argument_declarations

      SET:
         identifier :  elemRange
         index      :  er ;

      ELEMENT PARAMETER:
         identifier :  existingElement
         range      :  elemRange
         property   :  Input ;

      ELEMENT PARAMETER:
         identifier :  newElement
         range      :  elemRange
         property   :  Input ;

      SET:
         identifier :  processedIdentifiers
         subset of  :  AllIdentifiers
         index      :  someIdent
         property   :  Input ;

      ELEMENT PARAMETER:
         identifier :  eElemRange
         range      :  AllIdentifiers
         property   :  Input ;

    ENDSECTION  ;

    DECLARATION SECTION Local_declarations

      PARAMETER:
         identifier :  dim ;

      PARAMETER:
         identifier :  identifierBeenProcessed ;

      PARAMETER:
         identifier :  outerArgPos ;

      PARAMETER:
         identifier :  innerArgPos ;

      PARAMETER:
         identifier :  ok ;

      ELEMENT PARAMETER:
         identifier :  domInd
         range      :  AllIdentifiers ;

      ELEMENT PARAMETER:
         identifier :  domIndInner
         range      :  AllIdentifiers ;

      ELEMENT PARAMETER:
         identifier :  domSet
         range      :  AllIdentifiers ;

      STRING PARAMETER:
         identifier :  bodyLine ;

    ENDSECTION  ;

    DECLARATION SECTION mef_declarations

      ELEMENT PARAMETER:
         identifier :  e_lib
         range      :  AllIdentifiers ;

      ELEMENT PARAMETER:
         identifier :  e_sec
         range      :  AllIdentifiers ;

      ELEMENT PARAMETER:
         identifier :  e_decl
         range      :  AllIdentifiers ;

      ELEMENT PARAMETER:
         identifier :  e_proc
         range      :  AllIdentifiers
         default    :  'MainExecution' ;

      STRING PARAMETER:
         identifier :  s_textOfProcBody ;

    ENDSECTION  ;

    body       :  
      ! 0. Ensure there is no previous library with that name.
      e_lib := StringToElement( AllIdentifiers, "CreateCopyOfElement", create: 0);
      if e_lib then
              me::Delete( e_lib );
      endif ;
      
      ! 1. Create a runtime library and a procedure to be filled with assignment statements.
      e_lib  := me::CreateLibrary("CreateCopyOfElement", "cce" );
      e_proc := me::Create( "WorkCreateCopyOfElement", 'procedure', e_lib );
      
      s_textOfProcBody := "" ;
      
for someIdent do ! For each identifier to be processed:

  dim := IdentifierDimension( someIdent );
  outerArgPos := 1;
  while outerArgPos <= dim do
    domInd := DomainIndex( someIdent, outerArgPos );
    domSet := IndexRange( domInd );
    if domSet = eElemRange then

      ! Add a line like
      !       idName(i,'newElement',j) := idName(i,'existingElement',j);
      ! to the body of the procedure we are going to run.

      bodyLine := someIdent + "(";
      innerArgPos := 1 ;
      while innerArgPos < outerArgPos do
        domIndInner := DomainIndex( someIdent, innerArgPos );
        bodyLine += domIndInner + "," ;
        innerArgPos += 1;
      endwhile ;

      bodyLine += "'" + newElement + "'"   ;

      innerArgPos := outerArgPos + 1 ;
      while innerArgPos <= dim do
        domIndInner := DomainIndex( someIdent, innerArgPos );
        bodyLine += "," + domIndInner ;
        innerArgPos += 1;
      endwhile ;
      bodyLine += ")" ;

      bodyLine += " := " ;

      bodyLine += someIdent + "(";
      innerArgPos := 1 ;
      while innerArgPos < outerArgPos do
        domIndInner := DomainIndex( someIdent, innerArgPos );
        bodyLine += domIndInner + "," ;
        innerArgPos += 1;
      endwhile ;

      bodyLine += "'" + existingElement + "'" ;

      innerArgPos := outerArgPos + 1 ;
      while innerArgPos <= dim do
        domIndInner := DomainIndex( someIdent, innerArgPos );
        bodyLine += "," + domIndInner ;
        innerArgPos += 1;
      endwhile ;
      bodyLine += ")" ;

      bodyLine += " ; " ;

      ! Add the assignment statement to the procedure body.
      s_textOfProcBody += bodyLine + "\n" ;

    endif ;
    outerArgPos += 1 ;
  endwhile ;

endfor ;
      
      ok := me::SetAttribute( e_proc, 'body', s_textOfProcBody );
      
      ok := me::compile( e_lib );
      apply( e_proc );

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  LibraryInitialization

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  LibraryTermination
    body       :  
      return 1 ;

  ENDPROCEDURE  ;

ENDLIBRARYMODULE DataDuplicator ;
