## ams_version=1.0

Model Main_SharingIsRewarding {
    DeclarationSection App_File_Handling_Declarations {
        StringParameter sp_DataRoot;
        StringParameter sp_Level1 {
            InitialData: "lev1";
        }
        StringParameter sp_Level2 {
            Definition: "lev2";
        }
        StringParameter sp_Level3 {
            Definition: "lev3";
        }
        StringParameter sp_Filename {
            InitialData: "info.txt";
        }
        StringParameter sp_AuthUsersRWX;
        StringParameter sp_Text;
    }
    DeclarationSection User_Identification_Declarations {
        Set s_UserEntities {
            SubsetOf: guipro::PROEntity;
            Index: i_UE;
        }
        Set s_Admins {
            SubsetOf: guipro::PROEntity;
            Index: i_admin;
            Definition: {
                { guipro::PRO_ENT | StringOccurrences( guipro::PROEntityName(guipro::PRO_ENT), "admin", CaseSensitive:0 ) }
            }
        }
        StringParameter pro_cur_env {
            InitialData: "local";
        }
        StringParameter pro_cur_user {
            InitialData: "me";
        }
        StringParameter pro_cur_Bucket {
            InitialData: "bouquet";
        }
        Set pro_usr_groups {
            Index: pug;
            InitialData: data {};
        }
        StringParameter pro_cur_GroupName {
            IndexDomain: pug;
        }
    }
    Procedure pr_StartupProcedure {
        Body: {
            if pro::GetPROEndPoint() then ! Check if we're connected to an AIMMS PRO server.
            
            	! Ensure PRO connection is initialized
            	pro::Initialize();
            
            	! Identify the current app user.
            	pro::GetCurrentUserInfo(pro_cur_env, pro_cur_user, pro_cur_Bucket, 
            		pro_usr_groups, pro_cur_GroupName);
            
            	! Ensure all AIMMS PRO entities are known.
            	! Examples of AIMMS PRO entities are the users and the groups.
            	guipro::PopulateEntitySets( addUniversalSets:1 );
            
            	! Get the "users" group(s) and the "domain users" group(s).
            	! Note that s_UserEntities is a subset of the set guipro::PROEntity 
            	s_UserEntities :=  { guipro::PRO_ENT | 
            		( StringToLower( guipro::PROEntityName( guipro::PRO_ENT ) ) = "users"        ) or 
            		( StringToLower( guipro::PROEntityName( guipro::PRO_ENT ) ) = "domain users" )    } ;
            
            	block ! Construct the protection string
            		sp_AuthUsersRWX := "" ;
            		for i_UE do ! For each user group:
            			sp_AuthUsersRWX += formatString("#7+%e", i_UE );
            		endfor ;
            	endblock ;
            
            	! Assume all materials are to be shared inside the PRO storage folder /publicdata/project data/SharingIsRewarding.
            	sp_DataRoot := "/publicdata/project data/" + pro::ModelName ;
            
            endif ;
        }
    }
    Procedure pr_ButtonLoadFile {
        Body: {
            pr_ReadFile();
        }
    }
    Procedure pr_ButtonSaveFile {
        Body: {
            pr_CreateFile();
        }
    }
    Procedure pr_CreateFile {
        Body: {
            Block ! Creating folder structure, allowing anyone to access.
            	pro::CreateStorageFolder(sp_DataRoot, sp_AuthUsersRWX );
            
            	sp_ProStorageFoldername := sp_DataRoot + pro::FileSeparator + sp_Level1; 
            	pro::CreateStorageFolder(sp_ProStorageFoldername, sp_AuthUsersRWX );
            
            	sp_ProStorageFoldername +=               pro::FileSeparator + sp_Level2; 
            	pro::CreateStorageFolder(sp_ProStorageFoldername, sp_AuthUsersRWX );
            
            	sp_ProStorageFoldername +=               pro::FileSeparator + sp_Level3; 
            	pro::CreateStorageFolder(sp_ProStorageFoldername, sp_AuthUsersRWX );
            Endblock ;
            
            Block ! Create some example file to be shared.
            	put outf ;
            	put "This is ", sp_Filename, ", created at ", CurrentToString("%c%y-%m-%d %H:%M:%S"), " by ", pro_cur_user, ".", / ;
            	put "Environment of user is: ", pro_cur_env, ".", / ;
            	putclose ;
            Endblock ;
            
            
            Block ! Save the file created to PRO storage inside the folder just created using the authorization string as we want.
            	sp_ProStorageFilename := sp_ProStorageFoldername + pro::FileSeparator + sp_Filename ;
            	pro::SaveFileToCentralStorage( sp_Filename, sp_ProStorageFoldername, sp_AuthUsersRWX );
            Endblock ;
        }
        StringParameter sp_ProStorageFoldername;
        StringParameter sp_ProStorageFilename;
        File outf {
            Name: sp_Filename;
            Device: Disk;
            Mode: replace;
        }
    }
    Procedure pr_ReadFile {
        Body: {
            Block ! Determine the complete path within AIMMS PRO storage of the file to be read in.
            	sp_ProStorageFilename := sp_DataRoot + pro::FileSeparator + sp_Level1; 
            	sp_ProStorageFilename +=               pro::FileSeparator + sp_Level2; 
            	sp_ProStorageFilename +=               pro::FileSeparator + sp_Level3; 
            	sp_ProStorageFilename +=               pro::FileSeparator + sp_Filename ;
            Endblock ;
            
            if FileExists( sp_Filename ) then ! Remove old copy if it's there.
            	FileDelete( sp_Filename );
            endif ;
            
            ! Actually copy the file from AIMMS PRO storage to the project folder.
            pro::RetrieveFileFromCentralStorage(sp_ProStorageFilename, sp_Filename);
            
            if FileExists( sp_Filename ) then
            	! Read in the text of the file.
            	sp_Text := FileRead( sp_Filename );
            else
            	! Share a, hopefully informative', error message
            	sp_Text := FormatString("Sorry people, but I couldn't find %s from %s; %s", 
            		sp_Filename, sp_ProStorageFilename, CurrentErrorMessage );
            endif ;
        }
        StringParameter sp_ProStorageFilename;
    }
    Section MainProcs {
        Procedure MainInitialization {
            Comment: "Add initialization statements here that do NOT require any library being initialized already.";
        }
        Procedure PostMainInitialization {
            Comment: {
                "Add initialization statements here that require that the libraries are already initialized properly,
                or add statements that require the Data Management module to be initialized."
            }
        }
        Procedure MainExecution;
        Procedure PreMainTermination {
            Body: {
                return 1 ;
            }
            Comment: {
                "Add termination statements here that require all libraries to be still alive.
                Return 1 if you allow the termination sequence to continue.
                Return 0 if you want to cancel the termination sequence."
            }
        }
        Procedure MainTermination {
            Body: {
                return 1;
            }
            Comment: {
                "Add termination statements here that do not require all libraries to be still alive.
                Return 1 to allow the termination sequence to continue.
                Return 0 if you want to cancel the termination sequence.
                It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
            }
        }
    }
}
