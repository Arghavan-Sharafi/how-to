## ams_version=1.0

Model Main_CSVInterface {
    Section Using_SpreadSheet_Functions {
        Set s1_Rank {
            Index: i1_Rank;
        }
        StringParameter sp1_Country {
            IndexDomain: i1_Rank;
        }
        Parameter p1_Points {
            IndexDomain: i1_Rank;
        }
        Procedure SpreadSheetCSVRead {
            Body: {
                !specifying which file we want to interface with
                sp_FileName := "data//FootballRanking.csv";
                
                !specifying which sheet the contains the current data
                sp_SheetName := "FootballRanking";
                
                !Setting the specified sheet in the specified file as the active sheet
                SpreadSheet::SetActiveSheet(
                	workbook : sp_FileName , 
                	Name     : sp_SheetName );
                
                !Reading in the set of ranks
                SpreadSheet::RetrieveSet(
                	workbook : sp_FileName , 
                	Set      : s1_Rank , 
                	Range    : "A2:A51" , 
                	Sheet    : sp_SheetName , !optional if you aleady used the SetActiveSheet statement before this statemnet
                	Mode     : 'replace' );   !optional and default 'replace' is used if nothing specified. Use 'replace' to clear set and load data and 'merge' to add new elements to set.
                
                SpreadSheet::RetrieveParameter(
                	workbook                         : sp_FileName , 
                	Parameter                        : sp1_Country(i1_Rank) , 
                	Range                            : "B2:B51" , 
                	Sheet                            : sp_SheetName , 
                	Transposed                       :  0, 
                	AutomaticallyRoundToIntegerRange :  0);
                
                SpreadSheet::RetrieveParameter(
                	workbook                         : sp_FileName , 
                	Parameter                        : p1_Points(i1_Rank) , 
                	Range                            : "C2:C51" , 
                	Sheet                            : sp_SheetName , 
                	Transposed                       :  0, 
                	AutomaticallyRoundToIntegerRange :  0);
                
                SpreadSheet::CloseWorkbook(
                	workbook        : sp_FileName , 
                	SaveBeforeClose : 1 );
            }
        }
    }
    StringParameter sp_FileName;
    StringParameter sp_SheetName;
    StringParameter sp_DataSource;
    Set s2_Rank {
        Index: i2_Rank;
    }
    StringParameter sp2_Country {
        IndexDomain: i2_Rank;
    }
    Parameter p2_Points {
        IndexDomain: i2_Rank;
    }
    Section Using_CSVLink {
        StringParameter ReadWriteAttributes {
            IndexDomain: dl::rwattr;
        }
        StringParameter DataMap {
            IndexDomain: (dl::dt, dl::idn, dl::cn, dl::dn);
        }
        StringParameter MapName {
            InitialData: "TheMapping";
        }
        Procedure DataMapping {
            Body: {
                dl::RemoveDataSourceMapping(MapName : MapName );	
                
                dl::AddDataSourceMapping(
                	MapName        : MapName , 
                	DataMap        : DataMap , 
                	ColDepend      : dl::DependEmpty , 
                	TableAttribute : dl::TableAttributesEmpty , 
                	ColAttribute   : dl::ColAttributeEmpty );
            }
        }
        Procedure ReadData {
            Body: {
                read from file "Data//DataMap.txt";
                
                DataMapping;
                
                ReadWriteAttributes(dl::rwattr) := {'DataProvider' : csvprovider::DataLink};
                
                dl::DataRead(
                	DataSource     : "data//" , 
                	MapName        : MapName , 
                	ReadAttributes : ReadWriteAttributes );
            }
        }
    }
    Procedure MainInitialization {
        Comment: "Add initialization statements here that do NOT require any library being initialized already.";
    }
    Procedure PostMainInitialization {
        Comment: {
            "Add initialization statements here that require that the libraries are already initialized properly,
            or add statements that require the Data Management module to be initialized."
        }
    }
    Procedure MainExecution;
    Procedure PreMainTermination {
        Body: {
            return DataManagementExit();
        }
        Comment: {
            "Add termination statements here that require all libraries to be still alive.
            Return 1 if you allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence."
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that do not require all libraries to be still alive.
            Return 1 to allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence.
            It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
        }
    }
}
