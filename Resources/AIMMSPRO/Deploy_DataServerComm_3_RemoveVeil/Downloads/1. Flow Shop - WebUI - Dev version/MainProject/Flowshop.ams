## ams_version=1.0

Model Main_Flow_Shop {
    Comment: "Keywords: MIP model, Gantt chart, WebUI, Delegate, Interactive";
    Section WebUI_support {
        Set AllPublicIdentifiers {
            SubsetOf: AllIdentifiers;
            Definition: Main_Flow_Shop;
        }
        Section Gantt_Chart {
            Procedure prepInterface {
                Body: {
                    pGCJobStart(j,m)  := StartTime( first(s | JobSchedule(j,s)),m);
                    pGCJobDuration(j,m) := ProcesTime(j,m);
                }
            }
            Parameter pGCJobStart {
                IndexDomain: (j,m);
            }
            Parameter pGCJobDuration {
                IndexDomain: (j,m);
            }
            StringParameter JobDescription {
                IndexDomain: (j);
                Text: "Description of jobs that can be used inside the Gantt Chart";
                Definition: {
                    FormatString("J%i", ord(j));
                }
            }
            StringParameter MachineDescription {
                IndexDomain: (m);
                Text: "Description of machines that can be used inside the Gantt Chart";
                Definition: {
                    FormatString("M%i", ord(m));
                }
            }
        }
    }
    DeclarationSection Flowshop_problem_declaration {
        Parameter MaxJobs {
            Text: "Number of elements in the set Jobs";
            Range: integer;
        }
        Set Jobs {
            Text: "Set of all Jobs";
            Index: j, j2;
            Definition: {
                ElementRange(1,MaxJobs, prefix: "Job-");
            }
        }
        Set Schedules {
            Text: "Set of all schedules";
            Index: s;
            Definition: {
                ElementRange(1,MaxJobs, prefix: "Pos-");
            }
        }
        Parameter MaxMachines {
            Text: "Number of elements in the set Machines";
            Range: integer;
        }
        Set Machines {
            Text: "Set of all machines";
            Index: m;
            Definition: {
                ElementRange(1,MaxMachines, prefix: "M-");
            }
        }
        Parameter ProcesTime {
            IndexDomain: (j,m);
            Text: "Time required to process job j on machine m";
        }
        Variable JobSchedule {
            IndexDomain: (j,s);
            Text: "Determining the place of the job";
            Range: binary;
        }
        Variable StartTime {
            IndexDomain: (s,m);
            Text: "The time at which job in schedule position s commences processing on machine m";
            Range: nonnegative;
        }
        Constraint OneJobPerSchedule {
            IndexDomain: (s);
            Text: "Only one job is related to every schedule";
            Definition: sum(j, JobSchedule(j,s)) = 1;
        }
        Constraint OneSchedulePerJob {
            IndexDomain: (j);
            Text: "Only one schedule is related to every job";
            Definition: sum(s, JobSchedule(j,s)) = 1;
        }
        Constraint MachineStartTime {
            IndexDomain: (s,m) | m <> last(Machines);
            Text: "The commencement of schedule s on machine m+1 is no earlier then its finish on machine m";
            Definition: StartTime(s,m + 1) >=  StartTime(s,m) + sum(j, ProcesTime(j,m)*JobSchedule(j,s));
        }
        Constraint ScheduleStartTime {
            IndexDomain: (s,m) | s <> last(Schedules);
            Text: "The commencement of schedule s + 1 on machine m is no earlier then the finish time of job j on machine m";
            Definition: StartTime(s + 1,m) >=  StartTime(s,m) + sum(j, ProcesTime(j,m)*JobSchedule(j,s));
        }
        Variable TimeSpan {
            Text: "Total time to process all jobs on all machines";
            Definition: StartTime(Last(s),last(m)) + sum(j, ProcesTime(j,last(m))*JobSchedule(j,Last(s)));
        }
        MathematicalProgram FlowShopModel {
            Objective: TimeSpan;
            Direction: minimize;
            Constraints: AllConstraints;
            Variables: AllVariables;
        }
    }
    Section Main_Model_Procedures {
        Procedure myExistsState {
            Body: {
                return 0 ;
            }
        }
        Procedure MyRestoreState;
        Procedure MySaveState;
        Procedure MainInitialization {
            Body: {
                webui::ExistsWebUIStateHook := 'MyExistsState';
                webui::RestoreWebUIStateHook := 'MyRestoreState';
                webui::SaveWebUIStateHook := 'MySaveState';
                
                
                MaxJobs 	:=  7 ;
                MaxMachines 	:= 10 ;
                
                GenerateData;
            }
        }
        Procedure MainExecution;
        Procedure MainTermination {
            Body: {
                return 1 ;
            }
        }
    }
    Procedure prDoSolve {
        Body: {
            Empty AllVariables;
            GenerateData();
            solve FlowShopModel;
            prepInterface;
        }
    }
    Procedure GenerateData {
        Body: {
            ProcesTime(j,m) := round(Uniform(1,20));
        }
    }
}
