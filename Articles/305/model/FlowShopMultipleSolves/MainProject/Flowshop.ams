## ams_version=1.0

Model Main_Flow_Shop {
    Comment: {
        "Keywords:
        CallBackNewIncumbent, MIP model, Gantt chart, AsynchronousExecute, GMP."
    }
    Section WebUI_support {
        Set AllPublicIdentifiers {
            SubsetOf: AllIdentifiers;
            Definition: Main_Flow_Shop;
        }
        Set s_Solves {
            SubsetOf: Integers;
            Index: i_solve;
            Definition: data { 1 .. 5 };
        }
        Parameter p_noMaxJobsPerSolve {
            IndexDomain: i_solve;
            Definition: data { 1 : 12,  2 : 13,  3 : 14,  4 : 15,  5 : 16 };
        }
        Parameter p_noMachinesPerSolve {
            IndexDomain: i_solve;
            Definition: data { 1 : 13,  2 : 14,  3 : 15,  4 : 16,  5 : 17 };
        }
        Section Gantt_Chart {
            Procedure pr_prepInterface {
                Body: {
                    pGCJobStart(j,m)  := v_StartTime( first(s | v01_JobSchedule(j,s)),m);
                    pGCJobDuration(j,m) := p_ProcesTime(j,m);
                }
            }
            StringParameter sp_RefTime {
                Definition: "2000-01-01 01:01:01";
            }
            StringParameter sp_EndTime {
                Definition: "2000-01-07 01:01:01";
            }
            Parameter pGCJobStart {
                IndexDomain: (j,m);
            }
            Parameter pGCJobDuration {
                IndexDomain: (j,m);
            }
            StringParameter JobDescription {
                IndexDomain: (j);
                Text: "Description of jobs that can be used inside the Gantt Chart";
                Definition: {
                    FormatString("J%i", ord(j));
                }
            }
            StringParameter MachineDescription {
                IndexDomain: (m);
                Text: "Description of machines that can be used inside the Gantt Chart";
                Definition: {
                    FormatString("M%i", ord(m));
                }
            }
            Set s_GCWidgetActionNumbers {
                SubsetOf: Integers;
                Index: i_gcwan;
                Definition: ElementRange(1,9);
            }
            StringParameter sp_GCWidgetActions {
                IndexDomain: (i_gcwan,webui::indexWidgetActionSpec);
                Definition: {
                    data { 
                    	( 1, displaytext ) : "Optimize",  
                    	( 1, icon        ) : "aimms-blog2",  
                    	( 1, procedure   ) : "prBtnSolve",  
                    	( 1, state       ) : "Active" 
                    	}
                }
            }
        }
    }
    Parameter p_MaxJobs {
        Text: "Number of elements in the set Jobs";
        Range: integer;
    }
    Set s_Jobs {
        Text: "Set of all Jobs";
        Index: j, j2;
        Definition: {
            ElementRange(1,p_MaxJobs, prefix: "Job-");
        }
    }
    Set s_Schedules {
        Text: "Set of all schedules";
        Index: s;
        Definition: {
            ElementRange(1,p_MaxJobs, prefix: "Pos-");
        }
    }
    Parameter p_MaxMachines {
        Text: "Number of elements in the set Machines";
        Range: integer;
    }
    Set s_Machines {
        Text: "Set of all machines";
        Index: m;
        Definition: {
            ElementRange(1,p_MaxMachines, prefix: "M-");
        }
    }
    Parameter p_ProcesTime {
        IndexDomain: (j,m);
        Text: "Time required to process job j on machine m";
    }
    Variable v01_JobSchedule {
        IndexDomain: (j,s);
        Text: "Determining the place of the job";
        Range: binary;
    }
    Variable v_StartTime {
        IndexDomain: (s,m);
        Text: "The time at which job in schedule position s commences processing on machine m";
        Range: nonnegative;
    }
    Constraint c_OneJobPerSchedule {
        IndexDomain: (s);
        Text: "Only one job is related to every schedule";
        Definition: sum(j, v01_JobSchedule(j,s)) = 1;
    }
    Constraint c_OneSchedulePerJob {
        IndexDomain: (j);
        Text: "Only one schedule is related to every job";
        Definition: sum(s, v01_JobSchedule(j,s)) = 1;
    }
    Constraint c_MachineStartTime {
        IndexDomain: (s,m) | m <> last(s_Machines);
        Text: "The commencement of schedule s on machine m+1 is no earlier then its finish on machine m";
        Definition: v_StartTime(s,m + 1) >=  v_StartTime(s,m) + sum(j, p_ProcesTime(j,m)*v01_JobSchedule(j,s));
    }
    Constraint c_ScheduleStartTime {
        IndexDomain: (s,m) | s <> last(s_Schedules);
        Text: "The commencement of schedule s + 1 on machine m is no earlier then the finish time of job j on machine m";
        Definition: v_StartTime(s + 1,m) >=  v_StartTime(s,m) + sum(j, p_ProcesTime(j,m)*v01_JobSchedule(j,s));
    }
    Variable v_TimeSpan {
        Text: "Total time to process all jobs on all machines";
        Definition: v_StartTime(Last(s),last(m)) + sum(j, p_ProcesTime(j,last(m))*v01_JobSchedule(j,Last(s)));
    }
    MathematicalProgram mp_FlowShopModel {
        Objective: v_TimeSpan;
        Direction: minimize;
        Constraints: AllConstraints;
        Variables: AllVariables;
    }
    Section MainModelProcedures {
        Procedure myExistsState {
            Body: {
                return 0 ;
            }
        }
        Procedure MyRestoreState;
        Procedure MySaveState;
        Procedure MainInitialization {
            Body: {
                webui::ExistsWebUIStateHook  := 'MyExistsState';
                webui::RestoreWebUIStateHook := 'MyRestoreState';
                webui::SaveWebUIStateHook    := 'MySaveState';
                
                p_MaxJobs 	:= 4;
                p_MaxMachines 	:= 8;
                
                pr_GenerateData;
            }
        }
        Procedure MainExecution {
            Body: {
                Empty AllVariables;
                pr_GenerateData();
                
                solve mp_FlowShopModel  ;
            }
        }
        Procedure MainTermination {
            Body: {
                return 1;
            }
        }
    }
    Procedure pr_GenerateData {
        Body: {
            p_ProcesTime(j,m) := round(Uniform(1,20));
        }
    }
    Procedure pr_DoSolve {
        Body: {
            MainExecution();
            
            ! Copy the solver status file from the pro temp folder to AIMMS PRO Storage.
            if pro::GetPROEndPoint() then
            	sp_SolverLogFilename := "CPLEX 12.9.sta" ;
            	sp_ProTempLocation := pro::PROTempFolder + "/" + sp_SolverLogFilename ;
            	sp_userLocation := "userdata/" + pro::PROEnvironment + "/" + pro::PROUserName + "/" + pro::ModelName + "/" + sp_SolverLogFilename ;
            	pro::SaveFileToCentralStorage( sp_ProTempLocation, sp_userLocation );
            endif ;
            pr_prepInterface;
        }
        StringParameter sp_SolverLogFilename;
        StringParameter sp_ProTempLocation;
        StringParameter sp_userLocation;
    }
    Procedure pr_Solve {
        Body: {
            if pro::GetPROEndPoint() then
            	if pro::DelegateToServer( waitForCompletion  :  0, 
            				  completionCallback :  'pro::session::EmptyCallback' ) then	
            		return 1;
            	endif ;
            endif ;
            
            pr_DoSolve();
        }
    }
    Procedure pr_BtnSolve {
        Body: {
            for i_solve do
            	p_MaxJobs     := p_noMaxJobsPerSolve( i_solve);
            	p_MaxMachines := p_noMachinesPerSolve(i_solve);
            	pr_Solve();
            endfor ;
        }
    }
}
