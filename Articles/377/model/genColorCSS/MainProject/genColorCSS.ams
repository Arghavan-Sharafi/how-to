## ams_version=1.0

Model Main_genColorCSS {
	Procedure pr_test {
		Body: {
			pr_loadColorMaps();
			DirectoryGetFiles(
				directory       :  "./data", 
				filter          :  "*.json", 
				filenames       :  sp_jsonDataFiles(i_palletteNo), 
				recursive       :  0, 
				attributeFilter :  {});
			p_fnLen(i_palletteNo) := StringLength( sp_jsonDataFiles(i_palletteNo) );
			sp_palletteNames(i_palletteNo) := substring( sp_jsonDataFiles(i_palletteNo), 1, p_fnLen(i_palletteNo)-5 );
			for i_palletteNo do
				pr_loadColorsString("data",sp_jsonDataFiles(i_palletteNo));
				pr_writeCSSFile(sp_palletteNames(i_palletteNo),sp_palletteNames(i_palletteNo)+".css","data-coloring");
			endfor ;
			!
		}
		Parameter p_fnLen {
			IndexDomain: i_palletteNo;
		}
	}
	StringParameter sp_palette;
	Set s_colorNumbers {
		SubsetOf: Integers;
		Index: i_colorNo;
	}
	StringParameter sp_colorCode {
		IndexDomain: i_colorNo;
	}
	Parameter p_colorCode {
		IndexDomain: i_colorNo;
	}
	Set s_palletteNumbers {
		SubsetOf: Integers;
		Index: i_palletteNo;
	}
	StringParameter sp_jsonDataFiles {
		IndexDomain: i_palletteNo;
	}
	StringParameter sp_palletteNames {
		IndexDomain: i_palletteNo;
	}
	Section Reading_Json_files {
		Procedure pr_loadColorMaps {
			Body: {
				!dex::AddMapping(
				!	mappingName :  "colorMapNum", 
				!	mappingFile :  "mappings/colorJsonMapNum.xml");
				dex::AddMapping(
					mappingName :  "colorMapString", 
					mappingFile :  "mappings/colorJsonMapString.xml");
			}
		}
		Procedure pr_loadColorsNum {
			Body: {
				dex::ReadFromFile(
					dataFile         :  "data/colorCodes.json", 
					mappingName      :  "colorMapNum", 
					emptyIdentifiers :  0, 
					emptySets        :  0, 
					resetCounters    :  1);
			}
		}
		Procedure pr_loadColorsString {
			Arguments: (sp_folder,sp_file);
			Body: {
				empty s_colorNumbers ;
				dex::ReadFromFile(
					dataFile         :  sp_folder + "/" + sp_file,  
					mappingName      :  "colorMapString", 
					emptyIdentifiers :  0, 
					emptySets        :  0, 
					resetCounters    :  1);
			}
			StringParameter sp_folder {
				Property: Input;
			}
			StringParameter sp_file {
				Property: Input;
			}
		}
	}
	Section Writing_CSS_files_for_use_in_AIMMS_WebUI {
		DeclarationSection declarations {
			StringParameter sp_paletteName {
				InitialData: "iWantHue5";
			}
			StringParameter sp_cssFilename {
				InitialData: "colors.css";
			}
			StringParameter sp_cssFoldername {
				InitialData: "./MainProject/WebUI/resources/css/";
			}
		}
		Procedure pr_writeCSSFile {
			Arguments: (sp_paletteName,sp_filename,sp_folderName);
			Body: {
				sp_fullFilename := sp_folderName + "/" + sp_filename ;
				
				put f_cssFile ;
				
				block ! Document purpose of the .css file.
					put "/*", / ;
					put "   CSS file generated by genColorCSS.aimms", / ;
					put "   Purpose: add a color palette for data coloring", /, / ;
					put "   Section 1, giving the colors in the color palette a (numbered) name", / ;
					put "   Note: this kind of .CSS file is not supported by IE11", / ;
					put "*/", / ;
				endblock ;
				
				block ! put out the root section with the actual names.
					put /, ":root {", / ;
					put formatString("    --%s-color-0: %s ;", 
						sp_paletteName, "#eeeeee" ), /;
					for i_colorNo do
						put formatString("    --%s-color-%e: %s ;", 
							sp_paletteName, i_colorNo, sp_colorCode(i_colorNo) ), /;
					endfor ;
					put "}", / ;
				endblock ;
				
				block ! Here comes section 2
					put /, "/*", / ;
					put "    Section 2: Associating the annotations with color names for bar, bubble, and Gantt Charts.", / ;
					put "*/", / ;
				endblock ;
				
				block ! Section 2: CSS rules to fill areas in the bar, bubble, and Gantt Charts.
					put ".annotation-"+sp_paletteName+"-0{", / ;
					put "    fill: var(--"+sp_paletteName+"-color-0);", / ;
					put "}", / ;
					for i_colorNo do
						put formatString(".annotation-%s-%e{",sp_paletteName,val(i_colorNo)), / ;
						put formatString("    fill: var(--%s-color-%e);",sp_paletteName,val(i_colorNo)), / ;
						put "}", / ;
					endfor ;
				endblock ;
				
				block ! Here comes section 3
					put /, "/*", / ;
					put "    Section 3: Associating the annotations with colors for legend widget.", / ;
					put "*/", / ;
				endblock ;
				
				block ! Section 3: CSS rules to fill areas in the legend widget
					put ".aimms-widget.tag-legend-widget .annotation-"+sp_paletteName+"-0{", / ;
					put "    background: var(--"+sp_paletteName+"-color-0);", / ;
					put "}", / ;
					for i_colorNo do
						put formatString(".aimms-widget.tag-legend-widget .annotation-%s-%e{",sp_paletteName,i_colorNo), / ;
						put formatString("    background: var(--%s-color-%e);",sp_paletteName,i_colorNo), / ;
						put "}", / ;
					endfor ;
				endblock ;
				
				block ! Here comes section 4
					put /, "/*", / ;
					put "    Section 4: Associating the annotations with colors for table widget.", / ;
					put "*/", / ;
				endblock ;
				
				block ! Section 4: CSS rules to fill areas in the table widget
					put ".aimms-widget.tag-table-widget .annotation-"+sp_paletteName+"-0{", / ;
					put "    background: var(--"+sp_paletteName+"-color-0);", / ;
					put "}", / ;
					for i_colorNo do
						put formatString(".aimms-widget.tag-table-widget .annotation-%s-%e{",sp_paletteName,i_colorNo), / ;
						put formatString("    background: var(--%s-color-%e);",sp_paletteName,i_colorNo), / ;
						put "}", / ;
					endfor ;
				endblock ;
				
				
				
				putclose ;
			}
			StringParameter sp_filename {
				Property: Input;
			}
			StringParameter sp_folderName {
				Property: Input;
			}
			StringParameter sp_fullFilename;
			File f_cssFile {
				Name: sp_fullFilename;
				Device: Disk;
				Mode: replace;
			}
			StringParameter sp_paletteName {
				Property: Input;
			}
		}
	}
	Section Up_and_download {
		StringParameter sp_PublicDataExchangeFilename {
			InitialData: "pro:/PublicData/ExchangeFilename";
		}
		Section DownloadButton {
			StringParameter sp_FileProcessSpecificFileName;
			Procedure pr_Download {
				Arguments: (FileLocation,StatusCode,StatusDescription);
				Body: {
					Block
						FileLocation := "circle.png";
						sp_FileProcessSpecificFileName := webui::GetIOFilePath(FileLocation);
					
						pro::RetrieveFileFromCentralStorage(
							storagePath :  sp_PublicDataExchangeFilename, 
							localPath   :  sp_FileProcessSpecificFileName) ;
					
						StatusCode := webui::ReturnStatusCode('CREATED');
						StatusDescription := "Nice.";
					OnError err Do
						StatusCode := webui::ReturnStatusCode('ERROR');
						StatusDescription := "Oops: " + errh::Message(err) ;
						errh::MarkAsHandled(err);
						break ; ! Trick to reporting one error.
					EndBlock ;
				}
				StringParameter FileLocation {
					Property: Output;
				}
				Parameter StatusCode {
					Property: Output;
				}
				StringParameter StatusDescription {
					Property: Output;
				}
				ElementParameter err {
					Range: errh::PendingErrors;
				}
			}
		}
		Section UploadButton {
			Procedure pr_Upload {
				Arguments: (FileLocation,StatusCode,StatusDescription);
				Body: {
					sp_FileUploadLocation := webui::GetIOFilePath(FileLocation);
					! The file is uploaded to the process specific temporary folder. 
					
					! Now copy the uploaded file to Central Storage.
					pro::SaveFileToCentralStorage(
						localPath     :  sp_FileUploadLocation, 
						storagePath   :  sp_PublicDataExchangeFilename );
					
					FileDelete(sp_FileUploadLocation); ! Remove the file in the temporary folder.
					
					StatusCode := webui::ReturnStatusCode('OK');
					StatusDescription := "Nice.";
				}
				StringParameter FileLocation {
					Property: Input;
				}
				Parameter StatusCode {
					Property: Output;
				}
				StringParameter StatusDescription {
					Property: Output;
				}
				StringParameter sp_FileUploadLocation;
			}
		}
	}
	Section Application_initialization_execution_and_termination {
		Procedure MainInitialization {
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
