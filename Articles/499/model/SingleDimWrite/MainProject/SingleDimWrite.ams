## ams_version=1.0

Model Main_SingleDimWrite {
	Set s_variants {
		Index: i_variant;
	}
	Parameter p_dt1 {
		IndexDomain: i_variant;
	}
	StringParameter sp_nm1 {
		IndexDomain: i_variant;
	}
	StringParameter sp_connStr {
		InitialData: "data\\db_var.dsn";
	}
	Parameter p_testDb;
	DatabaseTable db_var {
		DataSource: sp_connStr;
		TableName: "variants";
		Mapping: {
			"var" -->i_variant,
			"db1" -->p_dt1( i_variant ),
			"nm1" -->sp_nm1( i_variant )
		}
	}
	DatabaseTable db_vari {
		IndexDomain: i_variant;
		DataSource: sp_connStr;
		TableName: "Variants";
		Mapping: {
			"var" -->i_variant,
			"db1" -->p_dt1( i_variant ),
			"nm1" -->sp_nm1( i_variant )
		}
	}
	Procedure pr_test {
		Body: {
			pr_connect();
			pr_writeAllRows();
		}
	}
	Procedure pr_writeSingleDim {
		Body: {
			block where
					database_foreign_key_handling := 'assume',
					database_string_valued_foreign_keys:= 'assume' ;
				write to table db_var ;
			endblock ;
		}
	}
	Procedure pr_writeAllRows {
		Body: {
			block where
					database_foreign_key_handling := 'assume',
					database_string_valued_foreign_keys:= 'assume' ;
				for i_variant do
					write to table db_vari(i_variant) ;
				endfor ;
			endblock ;
		}
	}
	Procedure pr_readInitial {
		Body: {
			read from file "data/initialData.txt" ;
		}
	}
	Procedure pr_connect {
		Body: {
			!DebuggerBreakpoint();
			!MySQL::pr_connectionString(sp_connStr); 
			!MySQL::pr_connectionString(sp_connStr,sp_additional:"FOUND_ROWS=0");
			MySQL::pr_connectionString(sp_connStr,sp_additional:"FOUND_ROWS=1"); ! Works ok.
			!MySQL::pr_connectionString(sp_connStr,p_prefVer:8); 
			!MySQL::pr_connectionString(sp_connStr,"useAffectedRows=true");
			
			!sp_connStr := "data/newZealand.dsn";useAffectedRows=true
			!sp_connStr := "data/db_var.dsn";
			!sp_connStr := "UseAffectedRows";
			!sp_connStr := "UseFoundRows";
			p_testdb := TestDataSource(sp_connStr);
			if not p_testdb then
				raise error "unable to connect to database";
			endif ;
		}
	}
	Section Application_initialization_execution_and_termination {
		Procedure MainInitialization {
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				pr_readInitial();
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
