## ams_version=1.0

LibraryModule MySQLSupportLibrary {
	Prefix: MySQL;
	Interface: Public_Section;
	Comment: {
		"! Development location of this library: for now Article 362."
	}
	Section Public_Section {
		Procedure pr_connectionString {
			Arguments: (sp_connStr,sp_server,p_port,sp_database,sp_user,sp_pwd,sp_context);
			Body: {
				if not sp_mySQLdriver then 
					raise error "no MySQL ODBC driver installed" ;
				endif ;
				
				! server / port: are we using the AIMMS IDE, 
				! do we have a connection to AIMMS PRO?
				! Are we running a published WinUI or WebUI app?
				pr_determineServerPort( sp_server, p_port, sp_context );
				
				! Most arguments of pr_connectionString are optional but 
				! SQLCreateConnectionString actually needs these arguments.
				! So for every argument not specified by pr_connectionString, 
				! substitute one from the credential file (if found).
				pr_determineServerDatabaseCredentials();
				pr_determineConnectionConstituents(sp_server,p_port,sp_database,sp_user,sp_pwd,sp_context);
				
				!Create the connection string 
				sp_connStr := SQLCreateConnectionString(
					DatabaseInterface              	:  'ODBC' ,
					DriverName                     	:  sp_mySQLdriver,
					ServerName                     	:  sp_server,
					DatabaseName                   	:  sp_database,
					UserId                         	:  sp_user,
					Password      			:  sp_pwd,
					AdditionalConnectionParameters	:  formatString("port=%i",p_port) );
			}
			StringParameter sp_connStr {
				Property: Output;
			}
			StringParameter sp_database {
				Property: Optional;
			}
			StringParameter sp_user {
				Property: Optional;
			}
			StringParameter sp_pwd {
				Property: Optional;
			}
			StringParameter sp_server {
				Property: Optional;
			}
			Parameter p_port {
				Property: Optional;
			}
			StringParameter sp_context {
				Property: Optional;
			}
		}
	}
	Section Private_Section {
		StringParameter sp_mySQLdriver;
		DeclarationSection file_based_connection_constituents {
			StringParameter sp_file_server;
			StringParameter sp_file_database;
			StringParameter sp_file_user;
			StringParameter sp_file_pwd;
			StringParameter sp_file_context;
			Parameter p_file_port;
		}
		Procedure pr_constructConnectionString;
		Procedure pr_determineMySQLdriver {
			Body: {
				! Find all ODBC Drivers
				while loopcount <= SQLNumberOfDrivers ('ODBC') do
					SetElementAdd(
						Setname: s_ODBCDrivers,
						Elempar: ep_ODBCDriver,
						Newname: SQLDriverName('ODBC',Loopcount));
				endwhile; 
				
				! Find the driver that handles database connection
				ep_ODBCDriver := '' ;
				if (not ep_ODBCDriver) then ! prefer MySQL 5.3 / Unicode.
					ep_ODBCDriver := first(i_ODBCdriver | ( FindString(i_ODBCdriver,"MySQL"   ) and 
										FindString(i_ODBCdriver,"5.3"     ) and 
										FindString(i_ODBCdriver,"Unicode" )      ) );
				endif;
				
				if (not ep_ODBCDriver) then ! Otherwise prefer MySQL 8.0 / Unicode.
					ep_ODBCDriver := first(i_ODBCdriver | ( FindString(i_ODBCdriver,"MySQL"   ) and 
										FindString(i_ODBCdriver,"8.0"     ) and 
										FindString(i_ODBCdriver,"Unicode" )      ) );
				endif;
				
				if (not ep_ODBCDriver) then ! otherwise prefer Unicode.
					ep_ODBCDriver := first(i_ODBCdriver | ( FindString(i_ODBCdriver,"MySQL") and 
										FindString(i_ODBCdriver,"Unicode")));
				endif;
				
				if (not ep_ODBCDriver) then
					ep_ODBCDriver := first(i_ODBCdriver | (FindString(i_ODBCdriver,"MySQL") ));
				endif;
				
				sp_mySQLdriver := formatString("%e", ep_ODBCDriver);
			}
			Comment: {
				"Add initialization statements here that require another library to be initialized already,
				or add statements that require the Data Management module to be initialized."
			}
			Set s_ODBCDrivers {
				Index: i_ODBCdriver;
				Parameter: ep_ODBCdriver;
			}
		}
		Procedure pr_determineServerDatabaseCredentials {
			Body: {
				! File to look for is MySQL.credentials
				sp_credentialsFilename := "MySQL.credentials" ;
				
				if pro::GetPROEndPoint() then
					raise error "Not implemented yet" ;
					! Get credentials from AIMMS PRO Storage (if available)
				
					! When no credentials available from AIMMS PRO Storage, and 
					! if we're in developer mode; check the parent folder for credentials.
				else
					! Using convention to store credentials file in the parent folder of the project folder;
					! this prevents accidental sharing of credentials when zipping an AIMMS Project folder.
					sp_fn := "../" + sp_credentialsFilename;
					if FileExists( sp_fn ) then
						read from file sp_fn ;
					endif ;
				endif ;
			}
			StringParameter sp_credentialsFilename;
			StringParameter sp_fn;
		}
		Procedure pr_determineServerPort {
			Arguments: (sp_server,p_port,sp_context);
			Body: {
				if ( not sp_server ) or ( not p_port ) then
					if projectDeveloperMode then
						if pro::GetPROEndPoint() then
							! In project developer mode with a connection to an AIMMS Cloud available.
							! We don't need the Tunnel App, but can create our own tunnel and use it here.
							pro::Initialize(); ! Ensure the PRO connection is initialized.
							if not p_port then
								if sp_context then
									p_port := pro::tunnel::TunnelStart( contextPath : sp_context );
								else
									p_port := pro::tunnel::TunnelStart( contextPath : "mysql" );
								endif ;
							endif ;
							if not sp_server then
								sp_server := "localhost" ;
							endif ;
						else
							! No connection to an AIMMS Cloud available.
							! This only works if a tunnel is active using the tunnel app.
							! Here we assume that the tunnel is using port 13306
							if not p_port then
								p_port := 13306 ;
							endif ;
							if not sp_server then
								sp_server := "localhost" ;
							endif ;
						endif ;
					else
						! Assume app is published on an AIMMS Cloud.
						if DirectoryExists( "MainProject/WebUI" ) then
							! The app is run as a published WebUI app, we can connect directly to the database.
							if not p_port then
								p_port := 3306 ;
							endif ;
							if not sp_server then
								sp_server := "aimms-sandbox.db.cloud.aimms.com" ;
							endif ;
						else
							! The app is run as a published WinUI app
							! Going to assume that no Tunnel App is running, so we need to setup our own tunnel
							if not p_port then
								p_port := pro::tunnel::TunnelStart( contextPath :  "mysql" );
							endif ;
							if not sp_server then
								sp_server := "localhost" ;
							endif ;
						endif ;
					endif ;
				endif ;
			}
			StringParameter sp_server {
				Property: InOut;
			}
			Parameter p_port {
				Property: InOut;
			}
			StringParameter sp_context {
				Property: Optional;
			}
		}
		Procedure pr_determineConnectionConstituents {
			Arguments: (sp_server,p_port,sp_database,sp_user,sp_pwd,sp_context);
			Body: {
				if not sp_server   then sp_server   := sp_file_server   ; endif ;
				if not p_port      then p_port      := p_file_port      ; endif ;
				if not sp_database then sp_database := sp_file_database ; endif ;
				if not sp_user     then sp_user     := sp_file_user     ; endif ;
				if not sp_pwd      then sp_pwd      := sp_file_pwd      ; endif ;
				if not sp_context  then sp_context  := sp_file_context  ; endif ;
			}
			StringParameter sp_server {
				Property: InOut;
			}
			Parameter p_port {
				Property: InOut;
			}
			StringParameter sp_database {
				Property: InOut;
			}
			StringParameter sp_user {
				Property: InOut;
			}
			StringParameter sp_pwd {
				Property: InOut;
			}
			StringParameter sp_context {
				Property: InOut;
			}
		}
		Section Library_initialization_and_termination {
			Procedure LibraryInitialization {
				Comment: "Add initialization statements here that do not require any other library being initialized already.";
			}
			Procedure PostLibraryInitialization {
				Body: {
					pr_determineMySQLdriver();
					empty file_based_connection_constituents ;
				}
				Comment: {
					"Add initialization statements here that require another library to be initialized already,
					or add statements that require the Data Management module to be initialized."
				}
			}
			Procedure PreLibraryTermination {
				Body: {
					return 1;
				}
				Comment: {
					"Add termination statements here that require all other libraries to be still alive.
					Return 1 if you allow the termination sequence to continue.
					Return 0 if you want to cancel the termination sequence."
				}
			}
			Procedure LibraryTermination {
				Body: {
					return 1;
				}
				Comment: {
					"Add termination statements here that do not require other libraries to be still alive.
					Return 1 to allow the termination sequence to continue.
					Return 0 if you want to cancel the termination sequence.
					It is recommended to only use the procedure PreLibraryTermination to cancel the termination sequence and let this procedure always return 1."
				}
			}
		}
	}
}
