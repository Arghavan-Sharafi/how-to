## ams_version=1.0

Model Main_SupportPlanning {
	Convention: cnv_model;
	Section WebUI_use {
		StringParameter sp_GanttChartReferenceTime {
			Definition: TimeSlotToString("%c%y-%m-%d %H:%M%TZ(webui::DisplayTimeZone)",cal_Slots,first(cal_Slots));
			Comment: "timeslotToString";
		}
		Parameter p01_employeeWorking {
			IndexDomain: (i_Employee,i_workBlock);
			Range: binary;
			Definition: round( v01_employeeWorking(i_Employee, i_workBlock) );
		}
		ElementParameter ep_EmpPlanViewportStart {
			Range: cal_workBlocks;
			Definition: first( cal_workBlocks );
		}
		StringParameter sp_EmpPlanViewportStart {
			Definition: TimeslotToString("%c%y-%m-%d %H:%M%TZ(webui::DisplayTimeZone)", cal_workBlocks, ep_EmpPlanViewportStart);
		}
		ElementParameter ep_EmpPlanViewportEnd {
			Range: cal_workBlocks;
			Definition: last( cal_workBlocks );
		}
		StringParameter sp_EmpPlanViewportEnd {
			Definition: TimeslotToString("%c%y-%m-%d %H:%M%TZ(webui::DisplayTimeZone)", cal_workBlocks, ep_EmpPlanViewportEnd);
		}
		StringParameter sp_datetimeFormat {
			Definition: sp_datetimeFormats(webui::WebApplicationTimeZone);
			Comment: {
				"if webui::DisplayTimeZone = \'W. Europe Standard Time\' then 
					\"%d.%m.%c%y %H:%M%TZ(webui::WebApplicationTimeZone)|\\\"\\\"|\\\" DST\\\"|\"
				elseif webui::DisplayTimeZone = \'North Asia East Standard Time\' then
					\"%d.%m.%c%y %H:%M%TZ(webui::WebApplicationTimeZone)|\\\"\\\"|\\\" DST\\\"|\"
				elseif webui::DisplayTimeZone = \'Central Brazilian Standard Time\' then
					\"%d/%m/%c%y %H:%M%TZ(webui::WebApplicationTimeZone)|\\\"\\\"|\\\" DST\\\"|\"
				else
					\"%c%y-%m-%d %H:%M%TZ(webui::WebApplicationTimeZone)|\\\"\\\"|\\\" DST\\\"|\"
				endif"
			}
		}
		StringParameter sp_datetimeFormats {
			IndexDomain: indexTimeZones;
			Default: "%c%y-%m-%d %H:%M%TZ(webui::WebApplicationTimeZone)|\"\"|\" DST\"|";
		}
		Convention cnv_WebUI {
			TimeslotFormat: {
				cal_Slots      : sp_datetimeFormat,
				cal_workBlocks : sp_datetimeFormat
			}
			Comment: {
				"cal_Slots      : \"%c%y-%m-%d %H:%M%TZ(webui::WebApplicationTimeZone)\",
				cal_workBlocks : \"%c%y-%m-%d %H:%M%TZ(webui::WebApplicationTimeZone)\""
			}
		}
		Procedure pr_uponChangeDisplayTimeZone {
			Body: {
				update sp_datetimeFormat ;
			}
		}
		Section actions {
			Set s_SecundaryActions {
				SubsetOf: Integers;
				Index: i_secundaryAction;
				Definition: ElementRange(0,9);
			}
			StringParameter sp_primaryPageAction {
				IndexDomain: webui::indexPageActionSpec;
				Definition: {
					{
					'displaytext' : "compute standby schedule", ! (Optional) The text/label you would like to give the action.
					'icon'        : "aimms-shuffle",            ! (Optional) The icon you want to display for the respective action.
					'procedure'   : "pr_SolveStandbySchedule",  ! (Optional) The procedure you want to call when the respective action is clicked.
					'state'       : "Active"                    ! (Optional) Active (displayed and clickable), Inactive (displayed and not clickable) and Hidden (not displayed). By default, the state is Hidden.
					}
				}
			}
			StringParameter sp_secundaryPageAction {
				IndexDomain: (i_secundaryAction,webui::indexPageActionSpec);
				Definition: {
					{
						('1', 'displaytext') : "reading data from New Zealand", ! (Optional) The text/label you would like to give the action.
						('1', 'icon'       ) : "aimms-book2",                   ! (Optional) The icon you want to display for the respective action.
						('1', 'procedure'  ) : "pr_ReadDB",                     ! (Optional) The procedure you want to call when the respective action is clicked.
						('1', 'state'      ) : "Active"                         ! (Optional) Active (displayed and clickable), Inactive (displayed and not clickable) and Hidden (not displayed). By default, the state is Hidden.
					
					}
				}
			}
		}
		Section Planning_Employees {
			Parameter p_EmployeeJobStart {
				IndexDomain: (i_Employee,i_workBlock) | p01_employeeWorking(i_Employee, i_workBlock);
				Unit: hour;
				Definition: {
					StringToMoment( 
						"%c%y-%m-%d %H:%M%TZ(webui::DisplayTimeZone)", [hour], sp_GanttChartReferenceTime, 
						TimeslotToString("%c%y-%m-%d %H:%M%TZ('UTC')", cal_workBlocks, i_workBlock))
				}
			}
			Parameter p_EmployeeJobDuration {
				IndexDomain: (i_Employee,i_workBlock) | p01_employeeWorking(i_Employee, i_workBlock);
				Unit: hour;
				Definition: 4[hour];
				webui::AnnotationsIdentifier: sp_EmployeeJobAnnotation;
			}
			StringParameter sp_EmployeeJobAnnotation {
				IndexDomain: (i_Employee,i_workBlock) | p01_employeeWorking(i_Employee, i_workBlock);
				Definition: "shift-" + ep_workBlockTimezoneToShift(i_workBlock, ep_TimezoneEmployee(i_Employee));
			}
		}
		Section Covering_skills {
			ElementParameter ep_EmployeeCoveringSkill {
				IndexDomain: (i_certification,i_workBlock);
				Range: s_Employees;
				Definition: {
					! in the case there are multiple employees on call for this certification, make the cheapest one the first to be called ;-)
					argmin( 
						i_employee | p01_employeeWorking(i_Employee, i_workBlock) and 
						             p01_certified(i_certification, i_Employee),
						p_cost(i_Employee, i_workBlock)
					)
				}
			}
			Parameter p_SkillJobStart {
				IndexDomain: (i_certification,i_workBlock);
				Unit: hour;
				Definition: {
					StringToMoment( 
						"%c%y-%m-%d %H:%M", [hour], sp_GanttChartReferenceTime, 
						TimeslotToString("%c%y-%m-%d %H:%M", cal_workBlocks, i_workBlock))
				}
			}
			Parameter p_SkillJobDuration {
				IndexDomain: (i_certification,i_workBlock);
				Unit: hour;
				Definition: 4[hour];
				webui::AnnotationsIdentifier: sp_SkillJobAnnotation;
				webui::ItemTextIdentifier: sp_SkillJobext;
				webui::TooltipIdentifier: sp_SkillTooltip;
			}
			StringParameter sp_SkillJobAnnotation {
				IndexDomain: (i_certification,i_workBlock);
				Definition: {
					formatString("qualitative%02i",
						ord(ep_EmployeeCoveringSkill(i_certification, i_workBlock),s_Employees))
				}
			}
			StringParameter sp_SkillJobext {
				IndexDomain: (i_certification,i_workBlock);
				Definition: {
					if ep_EmployeeCoveringSkill(i_certification, i_workBlock) then
						formatString("%e",ep_EmployeeCoveringSkill(i_certification, i_workBlock))
					else
						"none"
					endif
				}
			}
			StringParameter sp_SkillTooltip {
				IndexDomain: (i_certification,i_workBlock);
				Definition: {
					if ep_EmployeeCoveringSkill(i_certification, i_workBlock) then
						formatString("%e",ep_EmployeeCoveringSkill(i_certification, i_workBlock))
					else
						"none"
					endif
				}
			}
		}
		Section Job_table {
			Set s_JobNos {
				SubsetOf: Integers;
				Index: i_jobNo;
				Property: ElementsAreLabels;
				Definition: ElementRange(0,99);
			}
			ElementParameter ep_Job {
				IndexDomain: (i_Employee,i_jobNo);
				Range: cal_workBlocks;
			}
			Procedure pr_AssignJobsToWorkblocks {
				Body: {
					ep_lastAssignedJobNo(i_Employee) := '0' ;
					for (i_Employee, i_workBlock) | p01_employeeWorking(i_Employee, i_workBlock) do
						ep_lastAssignedJobNo(i_Employee) += 1 ;
						ep_Job( i_Employee, ep_lastAssignedJobNo(i_Employee) ) := i_workBlock ;
					endfor ;
				}
				ElementParameter ep_lastAssignedJobNo {
					IndexDomain: i_Employee;
					Range: s_JobNos;
				}
			}
		}
	}
	Section Read_demand_data {
		Convention cnv_database {
			TimeslotFormat: {
				cal_Slots      : "%c%y-%m-%d %H:%M%TZ(ep_databaseTimezone)",
				cal_workBlocks : "%c%y-%m-%d %H:%M%TZ(ep_databaseTimezone)"
			}
			Comment: "\"%c%y-%m-%d %H:%M%TZ(\'UTC\')\"";
		}
		StringParameter sp_connStr {
			InitialData: "";
		}
		DatabaseTable db_demandData {
			DataSource: sp_connStr;
			TableName: "expected-demand-in-new-zealand-standard-time";
			Convention: cnv_database;
			Mapping: {
				"workblock"     -->i_workBlock,
				"demand"        -->p_demand( i_workBlock )
			}
		}
		Parameter p_testDB;
		Parameter p_demand {
			IndexDomain: (i_workBlock);
		}
		Procedure pr_Conn {
			Body: {
				MySQL::pr_connectionString(sp_connStr);
				p_testdb := TestDataSource(sp_connStr);
				if not p_testdb then
					raise error "unable to connect to database";
				endif ;
			}
		}
		Procedure pr_ReadDB {
			Body: {
				if not sp_connStr then
					pr_conn();
				endif ;
				read from table db_demandData filtering i_workBlock;
			}
		}
	}
	DeclarationSection data_Declaration {
		Convention cnv_model {
			TimeslotFormat: {
				cal_Slots      : "%c%y-%m-%d %H:%M%TZ(ep_modelTimezone)",
				cal_workBlocks : "%c%y-%m-%d %H:%M%TZ(ep_modelTimezone)"
			}
			Comment: "\"%c%y-%m-%d %H:%M%TZ(\'UTC\')\"";
		}
		ElementParameter ep_databaseTimezone {
			Range: AllTimeZones;
			Definition: 'New Zealand Standard Time';
		}
		ElementParameter ep_modelTimezone {
			Range: AllTimeZones;
			Definition: 'UTC';
		}
		Set s_Certifications {
			Index: i_certification;
			Definition: data { a, b, c, d, e };
		}
		Set s_Employees {
			Index: i_Employee;
		}
		Parameter p01_certified {
			IndexDomain: (i_certification,i_Employee);
			Range: binary;
		}
		Quantity SI_Time_Duration {
			BaseUnit: minute;
			Conversions: {
				century->minute : #-># * 52560000,
				day    ->minute : #-># * 1440,
				hour   ->minute : #-># * 60,
				s      ->minute : #-># / 60,
				month  ->minute : #-># * 43800,
				week   ->minute : #-># * 10080,
				year   ->minute : #-># * 525600
			}
			Comment: "Expresses the value for the duration of periods.";
		}
		StringParameter sp_BeginWeek;
		StringParameter sp_BeginDayWeek;
		StringParameter sp_EndDayWeek;
		StringParameter sp_EndWeek;
		StringParameter sp_timeslotFormat {
			Definition: "%c%y-%m-%d %H:%M%TZ(ep_modelTimezone)";
		}
		Calendar cal_Days {
			Index: i_day;
			Unit: day;
			BeginDate: "2020-01-01";
			EndDate: "2039-12-31";
			TimeslotFormat: "%c%y-%m-%d";
		}
		Calendar cal_Slots {
			Index: i_Slot;
			Unit: 30 * minute;
			BeginDate: sp_BeginWeek;
			EndDate: sp_EndWeek;
			TimeslotFormat: sp_timeslotFormat;
		}
		Calendar cal_workBlocks {
			Index: i_workBlock, i_workBlockP;
			Unit: 240 * minute;
			BeginDate: sp_BeginWeek;
			EndDate: sp_EndWeek;
			TimeslotFormat: sp_timeslotFormat;
			Comment: {
				"! instead of 4 * hour, we use 240 * minute; this will enable time conversion of dates according to timezones."
			}
		}
		Set s_workBlocksFirstDay {
			SubsetOf: cal_workBlocks;
			Index: i_blkNO;
			Definition: {
				{ i_workBlock | TimeslotCharacteristic( i_workBlock, 'weekday' ) = 1 }
			}
		}
		Parameter p_CostBasedOnBlkNo {
			IndexDomain: i_blkNO;
			Definition: {
				data 
				{ '2020-08-03 00:00' : 1.400,  '2020-08-03 04:00' : 1.400,  ! Night shift
				  '2020-08-03 08:00' : 1.000,  '2020-08-03 12:00' : 1.000,  ! Day shift
				  '2020-08-03 16:00' : 1.250,  '2020-08-03 20:00' : 1.250 } ! Evening shift
			}
		}
		Set s_sameDay {
			IndexDomain: i_workDay;
			SubsetOf: cal_workBlocks;
			Definition: {
				{ i_WorkblockP | TimeslotCharacteristic( i_WorkblockP, 'weekDay' ) = TimeslotCharacteristic( i_WorkDay, 'weekDay' ) }
			}
		}
		Set s_workDays {
			SubsetOf: cal_Days;
			Index: i_workDay;
			Definition: {
				{ i_day | ( sp_beginDayWeek <= i_day ) and ( i_day <= sp_EndDayWeek ) }
			}
		}
	}
	Section Modeling_and_solving_the_rostering_problem {
		Section determining_cost_coefficients {
			Set s_Shifts {
				Index: i_shift;
				Definition: data { day, evening, night };
			}
			Parameter p_CostPerShift {
				IndexDomain: i_shift;
				Definition: data { day : 1, evening : 1.25, night: 1.4 };
			}
			ElementParameter ep_TimezoneEmployee {
				IndexDomain: i_Employee;
				Range: AllTimeZones;
			}
			Parameter p_cost {
				IndexDomain: (i_Employee,i_workBlock);
			}
			ElementParameter ep_TempForTimeZone {
				Range: AllTimeZones;
				Comment: "A temporary global element parameter, as TimeSlotToString needs a global element parameter.";
			}
			ElementParameter ep_workBlockTimezoneToShift {
				IndexDomain: (i_workBlock,indexTimezones);
				Range: s_Shifts;
				Comment: {
					"Shift start (local dst time) before 08:00 night shift,
					Shift start (local dst time) before 16:00 day shift
					Otherwise evening shift
					
					Note: this element parameter is also used to visualize 
					the shift indicative coloring in the Gantt Chart \'Employee planning\'."
				}
			}
			Procedure pr_determineCostCoefficients {
				Body: {
					Block ! Compute the shift of each workblock / timezone.
						for indexTimeZones do
							ep_TempForTimeZone := indexTimeZones;
							sp_workblockTimezoneToStartHour(i_workBlock, ep_TempForTimeZone) := 
								TimeSlotToString("%c%y-%m-%d %H:%M%TZ(ep_TempForTimeZone)|\"\"|\" DST\"|", 
									cal_workBlocks, i_workBlock );
						endfor ;
					
						! Thanks to the simplified format in the previous step, it is straightforward to determine the hour (in a 24 hour day).
						p_workblockTimezoneToStartHour(i_workBlock, IndexTimeZones)  := 
							val( substring( sp_workblockTimezoneToStartHour(i_workBlock, IndexTimeZones), 12, 13 ) );
					
						! for each workblock, timezone: determine whether this is a day, evening or night shift.
						ep_workBlockTimezoneToShift(i_workBlock, IndexTimeZones) := 
							if p_workblockTimezoneToStartHour(i_workBlock, IndexTimeZones) < 8 then
								'night'
							elseif p_workblockTimezoneToStartHour(i_workBlock, IndexTimeZones) < 16 then
								'day'
							else
								'evening'
							endif ;
					endblock ;
					
					! When an employee has more certifications; that employee is also better able
					! to create relevant content for users.
					p_noCertifications(i_Employee) := 
						count( i_certification, p01_certified(i_certification, i_Employee) );
					
					! The cost we're interested in, how expensive is it for an employee to be on standby during that workblock
					! depends on both the number of certifications and the shift in which the workBlock is executed.
					p_cost(i_Employee, i_workBlock) :=
						( 3 + p_noCertifications(i_Employee) ) * 
						p_CostPerShift(
							ep_workBlockTimezoneToShift(i_workBlock, 
								ep_TimezoneEmployee(i_Employee) ) );
				}
				StringParameter sp_workblockTimezoneToStartHour {
					IndexDomain: (i_workBlock,indexTimezones);
				}
				Parameter p_workblockTimezoneToStartHour {
					IndexDomain: (i_workBlock,indexTimezones);
				}
				Parameter p_noCertifications {
					IndexDomain: i_Employee;
				}
			}
		}
		DeclarationSection model_Declaration {
			Variable v01_employeeWorking {
				IndexDomain: (i_Employee,i_workBlock);
				Range: binary;
				Definition: v01_employeeStarted(i_Employee, i_workBlock) + v01_employeeStarted(i_Employee, i_workBlock--1);
				Comment: {
					"An employee works 8 hours, but is scheduled per 4 hours.  So he is working if he started this block or the previous block. 
					We plan a circular schedule; that is why the -- is used."
				}
			}
			Variable v01_employeeStarted {
				IndexDomain: (i_Employee,i_workBlock);
				Range: binary;
				Comment: "This is the primary decision variable.";
			}
			Variable v_blockCoverage {
				IndexDomain: (i_certification,i_workBlock);
				Range: [1, 3];
				Definition: sum( i_Employee, p01_certified(i_certification, i_Employee) * v01_employeeWorking(i_Employee, i_workBlock) );
				Comment: {
					"A block i_workBlock covers skill i_skill, if an employee is working during that block that has that skill.
					We require that at least 1 working employee has the required skill.
					The upperbound of three is to give this variable an upperbound."
				}
			}
			Variable v_NoWorkingEmployees {
				IndexDomain: i_workBlock;
				Range: [p_demand(i_workBlock), 4];
				Definition: sum( i_Employee, v01_employeeWorking(i_Employee, i_workBlock) );
			}
			Constraint c_employeeWorksAtMostOncePerDay {
				IndexDomain: (i_Employee,i_workDay);
				Definition: {
					sum( i_workBlockP | i_workBlockP in s_sameDay( i_workDay ), 
						v01_employeeStarted(i_Employee, i_workBlockP) ) <= 1
				}
				Comment: {
					"An employee works at most 8 hours per day, in other words that employee only starts once a day. 
					There are 6 blocks per day - so letting i_workBlockP vary between { i_workBlock ..  i_workBlock ++ 5 }"
				}
			}
			Variable v_blocksWorkedPerEmployee {
				IndexDomain: i_Employee;
				Range: [2, 8];
				Definition: {
					! lower bound of 2: everyone participates.
					! upper bound of 8: No more than the working time per week ;-)
					sum( i_workBlock, v01_employeeWorking(i_Employee, i_workBlock) )
				}
			}
			Variable v_cost {
				Range: free;
				Definition: {
					sum( (i_Employee, i_workBlock), 
						p_cost(i_Employee, i_workBlock) *
						v01_employeeStarted(i_Employee, i_workBlock) )
				}
			}
			MathematicalProgram mp_InternationalSupportScheduling {
				Objective: v_cost;
				Direction: minimize;
				Constraints: AllConstraints;
				Variables: AllVariables;
				Type: Automatic;
			}
		}
		Procedure pr_solveStandbySchedule {
			Body: {
				pr_determineCostCoefficients();
				solve mp_InternationalSupportScheduling ;
				pr_AssignJobsToWorkblocks();
			}
		}
	}
	Procedure pr_determineBeginEndCurrentWeek {
		Body: {
			ep_today := CurrentToTimeslot( cal_Days );
			p_weekDay := TimeslotCharacteristic( ep_today, 'weekDay' );
			
			block ! Determine begin of current week.
				ep_firstDayOfWeek := ep_today;
				if p_weekDay > 1 then
					ep_firstDayOfWeek -= (p_weekDay-1);
				endif ;
				block ! Verify that ep_firstDayOfWeek is a Monday.
					if TimeslotCharacteristic( ep_firstDayOfWeek, 'weekDay' ) <> 1 then
						raise error "pr_determineBeginEndCurrentWeek(), begin week is not on a Monday" ;
					endif ;
				endblock ;
				sp_BeginDayWeek := ep_firstDayOfWeek ;
				sp_BeginWeek := sp_BeginDayWeek + " 00:00";
			endblock ;
			
			block ! Determine end of current week.
				ep_lastDayOfWeek := ep_today;
				if p_weekDay < 7 then
					ep_lastDayOfWeek += (7 - p_weekDay);
				endif ;
				block ! Verify that ep_lastDayOfWeek is a Sunday.
					if TimeslotCharacteristic( ep_lastDayOfWeek, 'weekDay' ) <> 7 then
						raise error "pr_determineBeginEndCurrentWeek(), end week is not on a Sunday" ;
					endif ;
				endblock ;
				sp_EndDayWeek := ep_lastDayOfWeek ;
				sp_EndWeek := sp_EndDayWeek + " 23:30" ;
			endblock ;
		}
		StringParameter sp_today;
		ElementParameter ep_today {
			Range: cal_Days;
		}
		ElementParameter ep_firstDayOfWeek {
			Range: cal_Days;
		}
		ElementParameter ep_lastDayOfWeek {
			Range: cal_Days;
		}
		Parameter p_weekNo;
		Parameter p_weekDay;
	}
	Section Application_Initialization_Execution_and_Termination {
		Procedure MainInitialization {
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				! We assume that the user wants to view the schedule of the current week,
				! so we initialize the Gantt Chart View Window to that.
				pr_determineBeginEndCurrentWeek();
				
				! The cost coefficients are declared and determined in the section determining_cost_coefficients.
				! However, their values are not to be modified in the User Interface.
				CurrentInputs -= determining_cost_coefficients ;
				
				! Let the WebUI know which timezone is used inside the model.
				webui::ModelTimeZone := ep_modelTimezone ;
				
				webui::DisplayTimeZone := ep_modelTimezone ;
				webui::ApplicationConvention := 'cnv_WebUI' ;
				
				! To get rid of warning not initialized:
				empty p01_Certified, p_cost, ep_TimezoneEmployee, v01_employeeWorking, ep_workBlockTimezoneToShift ;
				
				! Certifications.inp contains the timezone of each employee and his/her certifications.
				! For now this input is stored as a file within the project.
				read from file "data/certifications.inp" ;
				
				! The user will be able to select the viewed timezone, from the collection of 
				! relevant timezones only:
				webui::DisplayTimeZones := 
					{ indexTimeZones | exists( i_employee | ep_TimezoneEmployee(i_Employee) = indexTimeZones ) } 
					+ ep_modelTimezone + ep_databaseTimezone ;
				
				webui::TimeZoneChangeHook := 'pr_uponChangeDisplayTimeZone' ;
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				! return DataManagementExit(); ! We don't work with cases (yet).
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
