## ams_version=1.0

Model Main_WrtieSparse {
    DeclarationSection data_declarations {
        Parameter p_N {
            Range: {
                {1..9}
            }
            InitialData: 4;
        }
        Set s_A {
            Index: i_a;
            Parameter: ep_a;
        }
        Set s_B {
            Index: i_b;
            Parameter: ep_b;
        }
        Parameter p_dat {
            IndexDomain: (i_a,i_b);
        }
        Parameter p01_flt {
            IndexDomain: (i_a,i_b);
            Range: binary;
        }
        Parameter p_dat_readInAfterWritingSelection {
            IndexDomain: (i_a,i_b);
        }
        Set rel_flt {
            SubsetOf: (s_A,s_B);
            Definition: {
                { (i_a,i_b) | p01_flt(i_a, i_b) }
            }
        }
    }
    DeclarationSection database_declarations {
        StringParameter sp_Conn {
            Definition: "data\\abc.dsn";
        }
        DatabaseTable db_AB_for_writing_Selection {
            DataSource: sp_Conn;
            TableName: "TableAB";
            Property: NoImplicitMapping;
            Mapping: {
                "NamesA" -->i_a,
                "NamesB" -->i_b,
                "Vals1"  -->p_dat( i_a, i_b )
            }
        }
        DatabaseTable db_AB_for_reading_Table {
            DataSource: sp_Conn;
            TableName: "TableAB";
            Property: NoImplicitMapping;
            Mapping: {
                "NamesA" -->i_a,
                "NamesB" -->i_b,
                "Vals1"  --> p_dat_readInAfterWritingSelection( i_a, i_b )
            }
        }
    }
    Section Write_Selection_Demo {
        Procedure pr_testWriteSelectionToDatabase {
            Body: {
                pr_EmptyTables();
                pr_InitializeDataForSelectionWriteToDatabase();
                
                pr_WriteSelectionToTables();
                pr_ReadTableAfterSelectionWrite();
                CloseDataSource(sp_Conn);
                
                webui::OpenPage('home');
            }
        }
        Procedure pr_InitializeDataForSelectionWriteToDatabase {
            Body: {
                p_N := 5 ;
                s_A := ElementRange(0,p_N,prefix:"a");
                s_B := ElementRange(0,p_N,prefix:"b");
                p_dat(i_a, i_b) := (ord(i_a)-1) * 10 + (ord(i_b)-1);
                p01_flt(i_a, i_b) := 1 $ ( mod( ord(i_a) + ord(i_b), 3 ) = 0 );
            }
        }
        Procedure pr_WriteSelectionToTables {
            Body: {
                write p_dat(i_a, i_b) to table db_AB_for_writing_Selection filtering (i_a, i_b) in rel_flt;
            }
        }
        Procedure pr_ReadTableAfterSelectionWrite {
            Body: {
                read from table db_AB_for_reading_Table ;
            }
        }
    }
    Section database_operations {
        Procedure pr_EmptyTables {
            Body: {
                empty db_AB_for_writing_Selection ;
            }
        }
    }
    Section misc;
    Section WebUI_Support;
    Section MainModelProcedures {
        Procedure MainInitialization {
            Comment: "Add initialization statements here that do NOT require any library being initialized already.";
        }
        Procedure PostMainInitialization {
            Comment: {
                "Add initialization statements here that require that the libraries are already initialized properly,
                or add statements that require the Data Management module to be initialized."
            }
        }
        Procedure MainExecution;
        Procedure PreMainTermination {
            Body: {
                return 1;
            }
            Comment: {
                "Add termination statements here that require all libraries to be still alive.
                Return 1 if you allow the termination sequence to continue.
                Return 0 if you want to cancel the termination sequence."
            }
        }
        Procedure MainTermination {
            Body: {
                return 1;
            }
            Comment: {
                "Add termination statements here that do not require all libraries to be still alive.
                Return 1 to allow the termination sequence to continue.
                Return 0 if you want to cancel the termination sequence.
                It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
            }
        }
    }
}
