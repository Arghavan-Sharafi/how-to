## ams_version=1.0

Model Main_imageSwitching {
	StringParameter sp_image {
		InitialData: "1.jpg";
	}
	StringParameter sp_display {
		Definition: {
			!String parameter used in the Image Widget to display the image.
		}
	}
	StringParameter sp_path {
		Definition: {
			!Path of the image to be displayed in the Image Widget
			"MainProject\\WebUI\\resources\\images\\display.jpg"
		}
	}
	Parameter ImageID;
	Procedure pr_show1 {
		Body: {
			!copies image 1.jpg from root to the images folder and overwrites display.jpg 
			sp_image := "1.jpg";
			FileCopy(sp_image, sp_path, 1);
			sp_display := formatstring("display.jpg?id=%n",ImageID); 
			ImageID += 1;
		}
	}
	Procedure pr_show2 {
		Body: {
			!copies image 2.jpg from root to the images folder and overwrites display.jpg 
			sp_image := "2.jpg";
			FileCopy(sp_image, sp_path, 1);
			sp_display := formatstring("display.jpg?id=%n",ImageID); 
			ImageID += 1;
		}
	}
	Procedure UploadImage {
		Arguments: (UploadedFileName,StatusCode,StatusDescription);
		Body: {
			FileDestination := "MainProject\\WebUI\\resources\\images\\display.jpg"; !same as sp_path
			FileCopy(webui::GetIOFilePath(UploadedFileName),FileDestination,1);
			statusCode := webui::ReturnStatusCode('OK');
			statusDescription := "Image successfully uploaded!";
			FileDelete(UploadedFileName);
			sp_display := formatstring("display.jpg?id=%n",ImageID); 
			ImageID += 1;
		}
		StringParameter UploadedFileName {
			Property: Input;
		}
		Parameter StatusCode {
			Property: Output;
		}
		StringParameter StatusDescription {
			Property: Output;
		}
		StringParameter FileDestination;
	}
	Procedure MainInitialization {
		Body: {
			ImageID := 0;
		}
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution;
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
}
