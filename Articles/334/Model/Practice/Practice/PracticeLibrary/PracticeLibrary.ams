## ams_version=1.0

LibraryModule PracticeLibrary {
    Prefix: pl;
    Interface: Public_Section;
    Section Public_Section {
        Set PracticeSet {
            Index: i_practice, j_practice;
        }
        Parameter Demand {
            IndexDomain: i_practice;
        }
        Parameter Distance {
            IndexDomain: (i_practice,j_practice);
        }
        Procedure TransferData {
            Arguments: (s_locPracSet,p_locDemand,p_locDistance);
            Body: {
                Empty PracticeSet;
                
                For i_argNod do
                	SetElementAdd(PracticeSet, newep, i_ArgNod);
                
                	newep2(i_ArgNod) := newep;
                	newep1(newep) := i_argNod ;
                
                EndFor;
                Demand(i_practice) := p_locDemand( newep1(i_practice));
                Distance(i_practice, j_practice) :=
                	p_locDistance(newep1(i_practice), newep1(j_practice));
            }
            Comment: {
                "	For j_argNod do
                		newep3(i_ArgNod, j_ArgNod) := newep;
                		Distance(newep3(i_ArgNod, j_ArgNod)) := p_locDistance(i_ArgNod,j_ArgNod);
                	EndFor;"
            }
            Set s_locPracSet {
                Index: i_ArgNod, j_ArgNod;
                Property: Input;
                Comment: "i_ArgNodes";
            }
            Parameter p_locDemand {
                IndexDomain: i_ArgNod;
                Property: Input;
            }
            ElementParameter newep2 {
                IndexDomain: i_ArgNod;
                Range: PracticeSet;
            }
            ElementParameter newep1 {
                IndexDomain: i_practice;
                Range: s_locPracSet;
            }
            ElementParameter newep3 {
                IndexDomain: (i_ArgNod,j_ArgNod);
                Range: PracticeSet;
            }
            ElementParameter newep {
                Range: PracticeSet;
            }
            Parameter p_locDistance {
                IndexDomain: (i_ArgNod, j_ArgNod);
                Property: Input;
            }
        }
    }
    Procedure LibraryInitialization {
        Comment: "Add initialization statements here that do not require any other library being initialized already.";
    }
    Procedure PostLibraryInitialization {
        Comment: {
            "Add initialization statements here that require another library to be initialized already,
            or add statements that require the Data Management module to be initialized."
        }
    }
    Procedure PreLibraryTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that require all other libraries to be still alive.
            Return 1 if you allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence."
        }
    }
    Procedure LibraryTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that do not require other libraries to be still alive.
            Return 1 to allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence.
            It is recommended to only use the procedure PreLibraryTermination to cancel the termination sequence and let this procedure always return 1."
        }
    }
}
