## ams_version=1.0

LibraryModule PracticeLibrary {
    Prefix: pl;
    Interface: Public_Section;
    Section Public_Section {
        Set s_CostumersLibrary {
            Index: i_library, j_library;
        }
        Parameter p_Demand {
            IndexDomain: i_library;
        }
        Parameter p_Distance {
            IndexDomain: (i_library,j_library);
        }
        Procedure TransferData {
            Arguments: (s_locCostumers,p_locDemand,p_locDistance);
            Body: {
                Empty s_CostumersLibrary;
                
                For i_loc do
                	SetElementAdd(s_CostumersLibrary, newep, i_loc);
                	newep2(i_loc) := newep;
                	newep1(newep) := i_loc;
                
                EndFor;
                p_Demand(i_library) := p_locDemand( newep1(i_library));
                p_Distance(i_library, j_library) :=
                	p_locDistance(newep1(i_library), newep1(j_library));
            }
            Set s_locCostumers {
                Index: i_loc, j_loc;
                Property: Input;
            }
            Parameter p_locDemand {
                IndexDomain: i_loc;
                Property: Input;
            }
            Parameter p_locDistance {
                IndexDomain: (i_loc, j_loc);
                Property: Input;
            }
            ElementParameter newep2 {
                IndexDomain: i_loc;
                Range: s_CostumersLibrary;
            }
            ElementParameter newep1 {
                IndexDomain: i_library;
                Range: s_locCostumers;
            }
            ElementParameter newep {
                Range: s_CostumersLibrary;
            }
        }
    }
    Procedure LibraryInitialization {
        Comment: "Add initialization statements here that do not require any other library being initialized already.";
    }
    Procedure PostLibraryInitialization {
        Comment: {
            "Add initialization statements here that require another library to be initialized already,
            or add statements that require the Data Management module to be initialized."
        }
    }
    Procedure PreLibraryTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that require all other libraries to be still alive.
            Return 1 if you allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence."
        }
    }
    Procedure LibraryTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that do not require other libraries to be still alive.
            Return 1 to allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence.
            It is recommended to only use the procedure PreLibraryTermination to cancel the termination sequence and let this procedure always return 1."
        }
    }
}
