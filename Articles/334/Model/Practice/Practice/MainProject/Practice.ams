## ams_version=1.0

Model Main_Practice {
    Set Costumers {
        Index: i, j;
        Definition: {
            {'punt A', 'punt B', 'punt C', 'punt D'}
        }
    }
    Parameter Demand1 {
        IndexDomain: i;
    }
    Parameter Distance1 {
        IndexDomain: (i,j);
    }
    Procedure MainInitialization {
        Comment: "Add initialization statements here that do NOT require any library being initialized already.";
    }
    Procedure PostMainInitialization {
        Comment: {
            "Add initialization statements here that require that the libraries are already initialized properly,
            or add statements that require the Data Management module to be initialized."
        }
    }
    Procedure MainExecution {
        Body: {
            pl::TransferData(Costumers,Demand1,Distance1);
            
            
            !Empty pl::PracticeSet;
            
            !For i do
            !	SetElementAdd(pl::PracticeSet, pl::newep, i);
            !EndFor;
        }
    }
    Procedure PreMainTermination {
        Body: {
            return DataManagementExit();
        }
        Comment: {
            "Add termination statements here that require all libraries to be still alive.
            Return 1 if you allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence."
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that do not require all libraries to be still alive.
            Return 1 to allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence.
            It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
        }
    }
}
