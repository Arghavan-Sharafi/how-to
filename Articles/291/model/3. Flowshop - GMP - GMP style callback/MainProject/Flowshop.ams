## ams_version=1.0

Model Main_Flow_Shop {
    Comment: "Keywords: MIP model, Gantt chart, WebUI, Delegate, Interactive";
    Section WebUI_support {
        Set AllPublicIdentifiers {
            SubsetOf: AllIdentifiers;
            Definition: Main_Flow_Shop;
        }
        Section Gantt_Chart {
            Procedure pr_prepInterface {
                Body: {
                    p_GCJobStart(j,m)  := v_StartTime( first(s | v_JobSchedule(j,s)),m);
                    p_GCJobDuration(j,m) := p_ProcesTime(j,m);
                }
            }
            DeclarationSection Widget_content_decls {
                Parameter p_GCJobStart {
                    IndexDomain: (j,m);
                }
                Parameter p_GCJobDuration {
                    IndexDomain: (j,m);
                }
                StringParameter sp_JobDescription {
                    IndexDomain: (j);
                    Text: "Description of jobs that can be used inside the Gantt Chart";
                    Definition: {
                        FormatString("J%i", ord(j));
                    }
                }
                StringParameter sp_MachineDescription {
                    IndexDomain: (m);
                    Text: "Description of machines that can be used inside the Gantt Chart";
                    Definition: {
                        FormatString("M%i", ord(m));
                    }
                }
            }
            DeclarationSection Widget_action_decls {
                Set s_WidgetActionOrder {
                    SubsetOf: Integers;
                    Index: i_wao;
                    Definition: elementRange(1,9);
                }
                StringParameter sp_GCWidgetActionSpecs {
                    IndexDomain: (i_wao, webui::indexWidgetActionSpec);
                    Definition: {
                        data {
                        	(1, displayText) : "Solve",
                        	(1, icon       ) : "aimms-spinner3",
                        	(1, procedure  ) : "pr_DoSolve",
                        	(1, state      ) : "Active"
                        }
                    }
                }
            }
        }
    }
    DeclarationSection Flowshop_problem_declaration {
        Parameter p_MaxJobs {
            Text: "Number of elements in the set Jobs";
            Range: integer;
        }
        Set s_Jobs {
            Text: "Set of all Jobs";
            Index: j, j2;
            Definition: {
                ElementRange(1,p_MaxJobs, prefix: "Job-");
            }
        }
        Set s_Schedules {
            Text: "Set of all schedules";
            Index: s;
            Definition: {
                ElementRange(1,p_MaxJobs, prefix: "Pos-");
            }
        }
        Parameter p_MaxMachines {
            Text: "Number of elements in the set Machines";
            Range: integer;
        }
        Set s_Machines {
            Text: "Set of all machines";
            Index: m;
            Definition: {
                ElementRange(1,p_MaxMachines, prefix: "M-");
            }
        }
        Parameter p_ProcesTime {
            IndexDomain: (j,m);
            Text: "Time required to process job j on machine m";
        }
        Variable v_JobSchedule {
            IndexDomain: (j,s);
            Text: "Determining the place of the job";
            Range: binary;
        }
        Variable v_StartTime {
            IndexDomain: (s,m);
            Text: "The time at which job in schedule position s commences processing on machine m";
            Range: nonnegative;
        }
        Constraint c_OneJobPerSchedule {
            IndexDomain: (s);
            Text: "Only one job is related to every schedule";
            Definition: sum(j, v_JobSchedule(j,s)) = 1;
        }
        Constraint c_OneSchedulePerJob {
            IndexDomain: (j);
            Text: "Only one schedule is related to every job";
            Definition: sum(s, v_JobSchedule(j,s)) = 1;
        }
        Constraint c_MachineStartTime {
            IndexDomain: (s,m) | m <> last(s_Machines);
            Text: "The commencement of schedule s on machine m+1 is no earlier then its finish on machine m";
            Definition: v_StartTime(s,m + 1) >=  v_StartTime(s,m) + sum(j, p_ProcesTime(j,m)*v_JobSchedule(j,s));
        }
        Constraint c_ScheduleStartTime {
            IndexDomain: (s,m) | s <> last(s_Schedules);
            Text: "The commencement of schedule s + 1 on machine m is no earlier then the finish time of job j on machine m";
            Definition: v_StartTime(s + 1,m) >=  v_StartTime(s,m) + sum(j, p_ProcesTime(j,m)*v_JobSchedule(j,s));
        }
        Variable TimeSpan {
            Text: "Total time to process all jobs on all machines";
            Definition: v_StartTime(Last(s),last(m)) + sum(j, p_ProcesTime(j,last(m))*v_JobSchedule(j,Last(s)));
        }
        MathematicalProgram FlowShopModel {
            Objective: TimeSpan;
            Direction: minimize;
            Constraints: AllConstraints;
            Variables: AllVariables;
        }
    }
    Section Main_Model_Procedures {
        Procedure MainInitialization {
            Body: {
                p_MaxJobs     := 13 ;
                p_MaxMachines := 16 ;
                
                pr_GenerateData;
            }
        }
        Procedure MainExecution;
        Procedure MainTermination {
            Body: {
                return 1 ;
            }
        }
    }
    Procedure pr_TimeCallback {
        Arguments: (ep_session);
        Body: {
            !pr_updateGap(FlowShopModel.bestbound, FlowShopModel.Incumbent);
            p_BestBound := GMP::SolverSession::GetBestBound( ep_session );
            pr_updateGap(p_BestBound, p_BestIncumbent);
            
            return 1 ; ! Indicate to the solver to continue.
        }
        ElementParameter ep_session {
            Range: AllSolverSessions;
            Property: Input;
        }
        Parameter p_BestBound;
    }
    Procedure pr_IncumbentCallback {
        Arguments: (ep_session);
        Body: {
            p_BestIncumbent := GMP::SolverSession::GetObjective( ep_session );
            
            return 1 ; ! Indicate to the solver to continue.
        }
        ElementParameter ep_session {
            Range: AllSolverSessions;
            Property: Input;
        }
    }
    Parameter p_BestIncumbent;
    Set s_Timepoints {
        SubsetOf: Integers;
        Index: i_tp;
        Parameter: ep_tp;
    }
    Parameter p_Bestbounds {
        IndexDomain: i_tp;
    }
    Parameter p_Incumbents {
        IndexDomain: i_tp;
    }
    Procedure pr_updateGap {
        Arguments: (bb,icb);
        Body: {
            s_Timepoints += 1 + card( s_Timepoints );
            ep_tp := last( s_Timepoints );
            
            if not mapval( bb ) then
            	p_Bestbounds(ep_tp) := bb ;
            endif ;
            
            if not mapval( icb ) then
            	p_Incumbents(ep_tp) := icb ;
            endif ;
        }
        Parameter bb {
            Property: Input;
        }
        Parameter icb {
            Property: Input;
        }
    }
    Procedure pr_DoSolve {
        Body: {
            Empty AllVariables;
            pr_GenerateData();
            p_BestIncumbent := 1000;
            empty s_Timepoints ;
            block where progress_time_interval := 1 ;
            	ep_GMP := gmp::Instance::Generate( FlowShopModel );
            	gmp::Instance::SetCallbackTime(
            		GMP      :  ep_GMP, 
            		callback :  'pr_TimeCallback');
            	GMP::Instance::SetCallbackNewIncumbent(
            		GMP      :  ep_GMP, 
            		callback :  'pr_IncumbentCallback');
            	gmp::Instance::Solve( ep_GMP );
            endblock ;
            pr_prepInterface;
        }
        ElementParameter ep_GMP {
            Range: AllGeneratedMathematicalPrograms;
        }
    }
    Procedure pr_GenerateData {
        Body: {
            p_ProcesTime(j,m) := round(Uniform(1,20));
        }
    }
}
