## ams_version=1.0

Model Main_Flow_Shop {
    Comment: "Keywords: MIP model, Gantt chart, WebUI, Delegate, Interactive";
    Section WebUI_support {
        Set AllPublicIdentifiers {
            SubsetOf: AllIdentifiers;
            Definition: Main_Flow_Shop;
        }
        Section Actions {
            StringParameter sp_PrimaryAction {
                IndexDomain: webui::indexPageActionSpec;
                Definition: {
                    data {
                    	'displaytext': "Solve" ,    ! (Optional) The text/label you would like to give the action.
                    	'icon' : "aimms-hammer",    ! (Optional) The icon you want to display for the respective action.
                    	'procedure' : "pr_DoSolve", ! (Optional) The procedure you want to call when the respective action is clicked.
                    	'state' : "Active"          ! (Optional) Active (displayed and clickable), 
                    	                            !            Inactive (displayed and not clickable), and 
                    	                            !            Hidden (not displayed). 
                    	                            !            By default, the state is Hidden.
                    }
                }
            }
        }
        Section Gantt_Chart {
            Procedure pr_prepInterface {
                Body: {
                    p_GCJobStart(j,m)  := v_StartTime( first(s | v01_JobSchedule(j,s)),m);
                    p_GCJobDuration(j,m) := p_ProcesTime(j,m);
                }
            }
            Parameter p_GCJobStart {
                IndexDomain: (j,m);
            }
            Parameter p_GCJobDuration {
                IndexDomain: (j,m);
            }
            StringParameter sp_JobDescription {
                IndexDomain: (j);
                Text: "Description of jobs that can be used inside the Gantt Chart";
                Definition: {
                    FormatString("J%i", ord(j));
                }
            }
            StringParameter sp_MachineDescription {
                IndexDomain: (m);
                Text: "Description of machines that can be used inside the Gantt Chart";
                Definition: {
                    FormatString("M%i", ord(m));
                }
            }
        }
    }
    DeclarationSection Flowshop_problem_declaration {
        Parameter p_MaxJobs {
            Text: "Number of elements in the set Jobs";
            Range: integer;
        }
        Set s_Jobs {
            Text: "Set of all Jobs";
            Index: j, j2;
            Definition: {
                ElementRange(1,p_MaxJobs, prefix: "Job-");
            }
        }
        Set s_Schedules {
            Text: "Set of all schedules";
            Index: s;
            Definition: {
                ElementRange(1,p_MaxJobs, prefix: "Pos-");
            }
        }
        Parameter p_MaxMachines {
            Text: "Number of elements in the set Machines";
            Range: integer;
        }
        Set s_Machines {
            Text: "Set of all machines";
            Index: m;
            Definition: {
                ElementRange(1,p_MaxMachines, prefix: "M-");
            }
        }
        Parameter p_ProcesTime {
            IndexDomain: (j,m);
            Text: "Time required to process job j on machine m";
        }
        Variable v01_JobSchedule {
            IndexDomain: (j,s);
            Text: "Determining the place of the job";
            Range: binary;
        }
        Variable v_StartTime {
            IndexDomain: (s,m);
            Text: "The time at which job in schedule position s commences processing on machine m";
            Range: nonnegative;
        }
        Constraint c_OneJobPerSchedule {
            IndexDomain: (s);
            Text: "Only one job is related to every schedule";
            Definition: sum(j, v01_JobSchedule(j,s)) = 1;
        }
        Constraint c_OneSchedulePerJob {
            IndexDomain: (j);
            Text: "Only one schedule is related to every job";
            Definition: sum(s, v01_JobSchedule(j,s)) = 1;
        }
        Constraint c_MachineStartTime {
            IndexDomain: (s,m) | m <> last(s_Machines);
            Text: "The commencement of schedule s on machine m+1 is no earlier then its finish on machine m";
            Definition: v_StartTime(s,m + 1) >=  v_StartTime(s,m) + sum(j, p_ProcesTime(j,m)*v01_JobSchedule(j,s));
        }
        Constraint c_ScheduleStartTime {
            IndexDomain: (s,m) | s <> last(s_Schedules);
            Text: "The commencement of schedule s + 1 on machine m is no earlier then the finish time of job j on machine m";
            Definition: v_StartTime(s + 1,m) >=  v_StartTime(s,m) + sum(j, p_ProcesTime(j,m)*v01_JobSchedule(j,s));
        }
        Variable v_TimeSpan {
            Text: "Total time to process all jobs on all machines";
            Definition: v_StartTime(Last(s),last(m)) + sum(j, p_ProcesTime(j,last(m))*v01_JobSchedule(j,Last(s)));
        }
        MathematicalProgram mp_FlowShopModel {
            Objective: v_TimeSpan;
            Direction: minimize;
            Constraints: AllConstraints;
            Variables: AllVariables;
        }
    }
    Section Main_Model_Procedures {
        Procedure MainInitialization {
            Body: {
                p_MaxJobs 	:=  7 ;
                p_MaxMachines 	:= 10 ;
                
                pr_GenerateData;
            }
        }
        Procedure MainExecution;
        Procedure MainTermination {
            Body: {
                return 1 ;
            }
        }
    }
    Procedure pr_DoSolve {
        Body: {
            Empty AllVariables;
            pr_GenerateData();
            solve mp_FlowShopModel;
            pr_prepInterface;
        }
    }
    Procedure pr_GenerateData {
        Body: {
            p_ProcesTime(j,m) := round(Uniform(1,20));
        }
    }
}
