## ams_version=1.0

Model Main_MultiLevelBucket {
    Comment: {
        "Lot sizing
        
        Problem type:
        MIP (medium)
        
        Description:
        Lot-sizing problems are production planning problems in which the periods
        are a priori, and production of an item in a given period implies some
        discrete event such as payment of a cost or the loss of a amount of
        production capacity, due to placement of an order, or the set-up, startup,
        or changeover of a machine. This is an multi-item, multi-level lot-sizing
        problem.
        
        References:
        Belvaux, G., L.A. Wolsey, Lotsizelib: A library of models and matrices for
        lot-sizing problems, Core discussion paper, Universite Catholique de Louvain,
        1999."
    }
    Parameter NumberOfItems {
        Definition: 40;
    }
    Parameter NumberOfPeriods {
        Definition: 12;
    }
    Parameter NumberOfEndProducts {
        Definition: 1;
    }
    Set Items {
        SubsetOf: Integers;
        Index: i, j;
        Definition: {
            {1..NumberOfItems}
        }
    }
    Set Periods {
        SubsetOf: Integers;
        Index: t;
        Definition: {
            {1..NumberOfPeriods}
        }
    }
    Parameter IntermediateSetUpCost {
        IndexDomain: (i);
    }
    Parameter SetUpCost {
        IndexDomain: i;
        Definition: 0.1 * IntermediateSetUpCost(i);
    }
    Parameter IntermediateInventoryCost {
        IndexDomain: (i);
    }
    Parameter InventoryCost {
        IndexDomain: (i);
        Definition: 0.1 * IntermediateInventoryCost(i);
    }
    Parameter BackloggingCost {
        IndexDomain: (i);
        Definition: 10 * IntermediateInventoryCost(i);
    }
    Parameter Demand {
        IndexDomain: (i,t);
    }
    Parameter TotalDemand {
        IndexDomain: i;
        Definition: sum(t, Demand(i, t));
    }
    Parameter Capacity {
        Definition: 0.5 * TotalDemand(1);
    }
    Parameter OverallCapacity {
        Definition: 5 * TotalDemand(1);
    }
    Parameter RML {
        IndexDomain: (i,j);
    }
    Parameter IP {
        IndexDomain: (i);
        Definition: {
            if (i <= NumberOfEndProducts) then
            1
            else
            0
            endif
        }
    }
    Variable X {
        IndexDomain: (i,t);
        Range: nonnegative;
        Comment: "Number of items i produced in period t";
    }
    Variable S {
        IndexDomain: (i,t);
        Range: nonnegative;
        Comment: "Stock of item i in period t";
    }
    Variable R {
        IndexDomain: (i,t) | IP(i);
        Range: nonnegative;
        Comment: "Backlog of item i in period t";
    }
    Variable Y {
        IndexDomain: (i,t);
        Range: binary;
        Comment: "Production variable: 1 if item i is produced on machine m in period t";
    }
    Variable TotalCost {
        Range: free;
        Definition: sum((i,t), SetUpCost(i) * Y(i, t) + InventoryCost(i) * S(i, t) + BackloggingCost(i) * R(i, t));
    }
    Constraint FlowConstraint1 {
        IndexDomain: (i,t) | IP(i) = 0;
        Definition: S(i, t-1) + X(i, t) = sum(j | j<>i, RML(i, j) * X(j, t)) + S(i, t);
    }
    Constraint FlowConstraint2 {
        IndexDomain: (i,t) | IP(i);
        Definition: S(i, t-1) - R(i, t-1) + X(i, t) = Demand(i, t) + S(i, t) - R(i, t);
    }
    Constraint CapacityConstraint {
        IndexDomain: (i,t);
        Definition: X(i, t) <= Capacity * Y(i, t);
    }
    Constraint OverallCapacityConstraint {
        IndexDomain: t;
        Definition: sum(i, X(i, t)) <= OverallCapacity;
    }
    MathematicalProgram LeastCost {
        Objective: TotalCost;
        Direction: minimize;
        Constraints: AllConstraints;
        Variables: AllVariables;
        Type: Automatic;
    }
    Procedure MainInitialization {
        Body: {
                IntermediateSetUpCost(i) := data
                {  1 : 282,   2 : 400,   3 : 477,   4 : 381,   5 : 536,   6 : 277,
                   7 : 441,   8 : 340,   9 : 863,  10 : 167,  11 : 827,  12 : 479,
                  13 : 212,  14 : 335,  15 : 902,  16 : 406,  17 : 733,  18 : 644,
                  19 :  98,  20 : 538,  21 : 645,  22 : 871,  23 : 811,  24 : 665,
                  25 : 505,  26 : 643,  27 : 346,  28 :  82,  29 : 824,  30 :  82,
                  31 : 179,  32 : 115,  33 :  64,  34 : 815,  35 : 812,  36 : 393,
                  37 : 716,  38 : 306,  39 : 487,  40 : 502 } ;
            
            
                IntermediateInventoryCost(i) := data
                {  1 : 0.200,   2 : 0.400,   3 : 0.300,   4 : 0.200,   5 : 0.400,
                   6 : 0.200,   7 : 0.400,   8 : 0.200,   9 : 0.200,  10 : 0.300,
                  11 : 0.200,  12 : 0.400,  13 : 0.300,  14 : 0.300,  15 : 0.300,
                  16 : 0.200,  17 : 0.400,  18 : 0.400,  19 : 0.400,  20 : 0.200,
                  21 : 0.300,  22 : 0.200,  23 : 0.300,  24 : 0.400,  25 : 0.300,
                  26 : 0.300,  27 : 0.300,  28 : 0.400,  29 : 0.400,  30 : 0.200,
                  31 : 0.200,  32 : 0.200,  33 : 0.400,  34 : 0.200,  35 : 0.400,
                  36 : 0.200,  37 : 0.200,  38 : 0.300,  39 : 0.400,  40 : 0.400 } ;
            
            
                RML(i,j) := data
                { (  2,  1 ) : 1,  (  3,  1 ) : 1,  (  4,  1 ) : 1,  (  5,  2 ) : 1,
                  (  6,  3 ) : 1,  (  7,  3 ) : 1,  (  8,  4 ) : 1,  (  9,  4 ) : 1,
                  ( 10,  1 ) : 1,  ( 11,  2 ) : 1,  ( 12,  5 ) : 1,  ( 13,  5 ) : 1,
                  ( 14,  6 ) : 1,  ( 15,  6 ) : 1,  ( 16,  4 ) : 1,  ( 17,  8 ) : 1,
                  ( 18,  8 ) : 1,  ( 19, 10 ) : 1,  ( 20, 10 ) : 1,  ( 21,  7 ) : 1,
                  ( 22,  7 ) : 1,  ( 23, 16 ) : 1,  ( 24, 16 ) : 1,  ( 25,  9 ) : 1,
                  ( 26, 10 ) : 1,  ( 27, 19 ) : 1,  ( 28, 19 ) : 1,  ( 29, 20 ) : 1,
                  ( 30, 20 ) : 1,  ( 31, 12 ) : 1,  ( 32, 12 ) : 1,  ( 33, 12 ) : 1,
                  ( 34, 13 ) : 1,  ( 35, 13 ) : 1,  ( 36, 15 ) : 1,  ( 37, 15 ) : 1,
                  ( 38, 17 ) : 1,  ( 39, 17 ) : 1,  ( 40,  9 ) : 1 } ;
            
            
            Demand(i,1)  :=  0  ;
            Demand(i,2)  :=  0  ;
            Demand(i,3)  :=  0  ;
            Demand(i,4)  :=  155;
            Demand(i,5)  :=  88 ;
            Demand(i,6)  :=  0  ;
            Demand(i,7)  :=  0  ;
            Demand(i,8)  :=  0  ;
            Demand(i,9)  :=  140;
            Demand(i,10) :=  0  ;
            Demand(i,11) :=  33 ;
            Demand(i,12) :=  0  ;
        }
    }
    Procedure MainExecution {
        Body: {
            solve LeastCost;
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
    }
}
