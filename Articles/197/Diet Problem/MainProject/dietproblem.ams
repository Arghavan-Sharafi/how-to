## ams_version=1.0

Model Main_DietProblem {
    Comment: {
        "Keywords:
        Diet problem, Blending problem, Unit-valued Parameter, Unit Parameter, Quantity, Unit conversion."
    }
    Section Model_Section {
        Set FoodTypes {
            Index: f;
            Definition: {
                data 
                    { 'Big Mac'             , 'Quarter Pounder'     , 'French Fries'        , Salad                 , 'Lowfat Milk'         ,
                      'Coca Cola'           , 'Big Mac Menu'        , 'Quarter Pounder Menu', 'Vegetable Burger'    }
            }
        }
        Parameter BP_selectedproducts {
            IndexDomain: i;
            Range: binary;
        }
        Variable Selectedproducts {
            IndexDomain: i;
            Range: binary;
        }
        Set Identifierss {
            Index: i;
            Definition: data { 'Nutritient Value', 'Servings', 'Weight (g)', 'PricePetUnit' };
        }
        Set Nutrients {
            Index: n;
        }
        Parameter NutrientValuePerUnit {
            IndexDomain: (f,n);
            Unit: UnitNutrients(n);
        }
        Parameter MaximumNumberOfServings {
            IndexDomain: (f);
        }
        Parameter MaximumAllowanceOfNutrient {
            IndexDomain: (n);
            Text: "Maximum Allowed";
            Unit: UnitNutrients(n);
        }
        Parameter MinimumRequirementOfNutrient {
            IndexDomain: (n);
            Text: "Minimum Requirement";
            Unit: UnitNutrients(n);
        }
        Parameter PricePerUnit {
            IndexDomain: (f);
            Unit: Hfl;
        }
        Parameter WeightOfFoodType {
            IndexDomain: (f);
            Unit: g;
        }
        Variable TotalWeightOptimalDiet {
            Unit: g;
            Definition: Sum[ f, WeightOfFoodType(f) * NumberOfUnitsInMenu(f)];
        }
        Variable TotalValueOfNutrientsInOptimalDiet {
            IndexDomain: (n);
            Unit: UnitNutrients(n);
            Definition: Sum[ f, NutrientValuePerUnit(f,n) * NumberOfUnitsInMenu(f)];
        }
        Variable NumberOfUnitsInMenu {
            IndexDomain: (f);
            Range: {
                {0..MaximumNumberOfServings(f)}
            }
        }
        Variable TotalCost {
            Unit: Hfl;
            Definition: {
                Sum[ f, PricePerUnit(f) * NumberOfUnitsInMenu(f)];
            }
        }
        Constraint AllowanceConstraint {
            IndexDomain: n | MaximumAllowanceOfNutrient(n);
            Unit: UnitNutrients(n);
            Definition: {
                Sum[ f, NutrientValuePerUnit(f,n) * NumberOfUnitsInMenu(f)] <= MaximumAllowanceOfNutrient(n);
            }
        }
        Constraint RequirementConstraint {
            IndexDomain: n | MinimumRequirementOfNutrient(n);
            Unit: UnitNutrients(n);
            Definition: {
                Sum[ f, NutrientValuePerUnit(f,n) * NumberOfUnitsInMenu(f)] >= MinimumRequirementOfNutrient(n);
            }
        }
        MathematicalProgram DietProblem {
            Objective: TotalCost;
            Direction: minimize;
            Constraints: AllConstraints;
            Variables: AllVariables;
            Type: MIP;
        }
        ElementParameter ACase {
            Range: AllCases;
        }
    }
    Section Quantities_and_Units_Section {
        DeclarationSection Quantities_and_Units {
            Quantity SI_Mass {
                BaseUnit: g;
                Conversions: {
                    kg -> g : # -> # * 1000,
                    oz -> g : # -> # * 283.4952
                }
                Comment: "Expresses the value for the amount of matter.";
            }
            Quantity SI_Energy {
                BaseUnit: kcal;
                Conversions: {
                    J  -> kcal : # -> # * 0.0002388458966,
                    kJ -> kcal : # -> # * 0.2388458966
                }
                Comment: "Expresses the value for the capacity to do work.";
            }
            Quantity Currency {
                BaseUnit: Euro;
                Conversions: {
                    US$ -> Euro : # -> # * 0.9708737863,
                    Hfl -> Euro : # -> # * 0.4368932039
                }
            }
            UnitParameter UnitNutrients {
                IndexDomain: (n);
            }
            StringParameter DefaultUnits {
                IndexDomain: n;
            }
        }
    }
    Section GUI_Section {
        Set PossibleUnits {
            Definition: data { g, kg, oz, j, kj, kcal };
        }
        Set PossibleUnitsByNutrients {
            IndexDomain: (n);
            SubsetOf: PossibleUnits;
            Definition: {
                data
                    { Calories      : { j   , kj  , kcal } ,
                      Protein       : { g   , kg  , oz   } ,
                      Fat           : { g   , kg  , oz   } ,
                      Carbohydrates : { g   , kg  , oz   } } ;
            }
        }
        Assertion CheckUnit {
            IndexDomain: n;
            Definition: StringToElement(PossibleUnits,UnitNutrients(n),0) in PossibleUnitsByNutrients(n) OR not UnitNutrients(n);
            Action: {
                DialogMessage(FormatString("This unit is not allowed for this value (%e)", n),"Warning");
                empty UnitNutrients(n)
            }
        }
    }
    Section DataLinkExample {
        StringParameter Schema {
            IndexDomain: (dl::dt,dl::cn);
        }
        ElementParameter ColumnType {
            IndexDomain: (dl::dt,dl::cn);
            Range: dl::ColumnTypes;
        }
        Procedure WriteOutNutrientValues {
            Body: {
                
                dl::DataTables+={'FoodType', 'Nutrient'};  ! define a tablename
                
                ! create the datamap
                dl::DataMap := data{
                
                ! sheet 1
                ( 'FoodType' ,    'FoodTypes'              , 0 ,  'colname' ):     "Food Type", ! set
                
                ( 'FoodType' ,    'WeightOfFoodType'       , 0 ,  'colname' ):     "Weight",    ! par
                ( 'FoodType' ,    'PricePerUnit'           , 0 ,  'colname' ):     "Price",     ! par
                
                ( 'FoodType' ,    'NutrientValuePerUnit'   , 1 ,  'colname' ):     "Calories",  ! col par with 4 cols
                ( 'FoodType' ,    'NutrientValuePerUnit'   , 2 ,  'colname' ):     "Protein",
                ( 'FoodType' ,    'NutrientValuePerUnit'   , 3 ,  'colname' ):     "Fat",
                ( 'FoodType' ,    'NutrientValuePerUnit'   , 4 ,  'colname' ):     "Carbohydrates",
                
                ! sheet 2
                ( 'Nutrient' ,    'Nutrients'             ,0,    'colname' ):      "Nutrient",   ! set
                
                ( 'Nutrient' ,    'MinimumRequirementOfNutrient' ,0,'colname' ):   "Min",        ! par
                ( 'Nutrient' ,    'MaximumAllowanceOfNutrient'   ,0,'colname' ):   "Max"         ! par
                
                };
                
                ! if a datamap with name "basic_dm" exist we cannot add it, so we remove it first
                dl::RemoveDataSourceMapping("diet_dm");  
                
                dl::AddDataMap("diet_dm",dl::DataMap);  ! add the datamap to DataLink
                
                ! The provider set on initialization the value of string parameter DataLink
                ! We only have to pass this on to DataLink in the readwrite attribute
                PickTheProvider := {'DataProvider' : xlsprov::DataLink }; 
                
                dl::DataWrite(
                   "Diet.xlsx",  ! choose a source
                   "diet_dm",          ! pick a data map 
                   PickTheProvider   
                );
            }
            DeclarationSection Local_Declaration {
                StringParameter PickTheProvider {
                    IndexDomain: dl::rwattr;
                    Comment: "This will specify the read/write attribute. At least we have to specify the provider.";
                }
            }
        }
        Procedure GetSchemaDiet {
            Body: {
                
                ! set the provider
                PickTheProvider := {'DataProvider' : xlsprov::DataLink }; 
                
                ! read the schema
                dl::GetDataSourceSchema(
                   "Diet.xlsx",  ! choose a source
                   Schema,
                   ColumnType,
                   PickTheProvider   
                );
            }
            DeclarationSection Local_Declaration {
                StringParameter PickTheProvider {
                    IndexDomain: dl::rwattr;
                    Comment: "This will specify the read/write attribute. At least we have to specify the provider.";
                }
            }
        }
    }
    Procedure MainInitialization {
        Body: {
            Empty NumberOfUnitsInMenu, TotalCost, TotalValueOfNutrientsInOptimalDiet, TotalWeightOptimalDiet;
        }
    }
    Procedure MainExecution {
        Body: {
            Solve DietProblem;
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
    }
}
