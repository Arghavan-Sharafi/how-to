## ams_version=1.0

Model Main_GMPTestModel {
    DeclarationSection Model_Declaration {
        Set ProductionCenters {
            Index: pc;
        }
        Set DemandCenters {
            Index: dc;
        }
        Parameter Demand {
            IndexDomain: (dc);
        }
        Parameter ProductionCost {
            IndexDomain: (pc);
        }
        Parameter ProductionMax {
            IndexDomain: (pc);
        }
        Parameter TransportCost {
            IndexDomain: (pc,dc);
        }
        Variable Production {
            IndexDomain: (pc);
            Range: [0, ProductionMax(pc)];
        }
        Variable Transport {
            IndexDomain: (pc,dc);
            Range: nonnegative;
        }
        Constraint SatisfyDemand {
            IndexDomain: (dc);
            Definition: Demand(dc) <= sum( pc, Transport( pc, dc) );
        }
        Constraint LimitSupply {
            IndexDomain: (pc);
            Definition: sum(dc, Transport( pc, dc ) ) <= Production(pc);
        }
        Constraint ExtraConstraint {
            Definition: -12 <= sum( (pc,dc), Transport(pc,dc) ) <= 10000;
        }
        Variable TotalCost {
            Definition: sum( (pc, dc), Transport(pc, dc ) * Transport(pc, dc));
            Comment: {
                "sum( pc, ProductionCost(pc) * Production(pc) ) +
                sum( (pc, dc ), TransportCost(pc,dc) * Transport(pc,dc) )"
            }
        }
        MathematicalProgram MinimizeCost {
            Objective: TotalCost;
            Direction: minimize;
        }
    }
    Procedure MainInitialization {
        Body: {
            ProductionCenters := data { Amsterdam, Rotterdam };
            DemandCenters := data { Haarlem, Utrecht, 'Den Haag' };
            Demand( dc ) := 100;
            ProductionCost( pc ) := data
               { Rotterdam : 5,
                 Amsterdam : 6 };
            
            ProductionMax( pc ) := data
               { Rotterdam : 170,
                 Amsterdam : 170 };
            
            TransportCost( pc, dc ) := data
               { ( Amsterdam, Haarlem ) : 2,
                 ( Amsterdam, Utrecht ) : 3,
                 ( Amsterdam, 'Den Haag' ) : 4,
                 ( Rotterdam, Haarlem ) : 5,
                 ( Rotterdam, Utrecht ) : 5,
                 ( Rotterdam, 'Den Haag' ) : 3 };
            
            MaxMeasurePoints := 400;
            
            MaxIterations := 1000;
        }
    }
    Procedure MainExecution {
        Body: {
            SolveGMPFull;
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
    }
    DeclarationSection Memory_Declaration {
        File DisplayMemory {
            Name: "display.put";
            Device: window;
        }
        Parameter tCoef {
            IndexDomain: (pc,dc);
        }
        Parameter ok;
        Parameter MeasurePointsCounter;
        Parameter MaxMeasurePoints;
        Set sMeasurePoints {
            SubsetOf: Integers;
            Index: p;
            Parameter: CurrentPoint;
            Property: ElementsAreNumerical;
            Definition: ElementRange(0,MaxMeasurePoints);
        }
        Parameter UsedMemory {
            IndexDomain: p;
        }
        Parameter IterationsCounter;
        Parameter MaxIterations;
        Parameter WorkingMemoryBefore;
        Parameter WorkingMemoryAfter;
    }
    Procedure StoreMemoryBefore {
        Body: {
            empty WorkingMemoryBefore;
            
            WorkingMemoryBefore := MemoryInUse;
        }
        Comment: "WorkingMemoryInUse";
    }
    Procedure StoreMemoryAfter {
        Body: {
            empty WorkingMemoryAfter;
            
            WorkingMemoryAfter := MemoryInUse;
        }
    }
    Procedure DisplayMemoryInfo {
        Body: {
            ! display WorkingMemoryBefore, WorkingMemoryAfter;
        }
    }
    DeclarationSection GMP_Declaration {
        ElementParameter aGMP {
            Range: AllGeneratedMathematicalPrograms;
        }
        ElementParameter aSession {
            Range: AllSolverSessions;
        }
    }
    Procedure SolveGMPFull {
        Body: {
            !put DisplayMemory;
            
            StoreMemoryBefore;
            
            aGMP := GMP::Instance::Generate( MinimizeCost );
            aSession := GMP::Instance::CreateSolverSession( aGMP );
            
            GMP::Solution::RetrieveFromModel( aGMP, 1 );
            GMP::Solution::SendToSolverSession( aSession, 1 );
            GMP::SolverSession::Execute( aSession ) ;
            GMP::Solution::RetrieveFromSolverSession( aSession, 1 );
            GMP::Solution::SendToModel( aGMP, 1 );
            
            StoreMemoryAfter;
            
            DisplayMemoryInfo;
            
            
            StoreMemoryBefore;
            
            CurrentPoint := First(sMeasurePoints);
            UsedMemory(CurrentPoint) := WorkingMemoryBefore;
            
            for ( pc, dc ) do
            
               tCoef(pc,dc) := GMP::Coefficient::Get( aGMP, LimitSupply(pc), Transport(pc,dc) );
            
            endfor;
            
            MeasurePointsCounter := 1;
            
            while MeasurePointsCounter <= MaxMeasurePoints do
            
                    IterationsCounter := 1;
            
                    while IterationsCounter <= MaxIterations do
            
                            for ( pc, dc ) do
            
                                 ok := GMP::Coefficient::Set( aGMP, LimitSupply(pc), Transport(pc,dc), tCoef(pc,dc) );
            
                            endfor;
            
                            IterationsCounter += 1;
            
                    endwhile;
            
                    StoreMemoryAfter;
            
                    CurrentPoint += 1;
                    UsedMemory(CurrentPoint) := WorkingMemoryAfter;
            
                    !display MeasurePointsCounter;
                    DisplayMemoryInfo;
            
                    MeasurePointsCounter += 1;
            
            endwhile;
            
            !putclose;
        }
    }
}
