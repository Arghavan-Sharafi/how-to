## ams_version=1.0

Model Main_DeprecateCompoundSets {
    DeclarationSection Running_example_input_declarations {
        Set S {
            Index: i;
        }
        Set T {
            Index: j;
        }
        Set U {
            Index: k;
        }
        Set R {
            SubsetOf: (S,T,U);
        }
        Set C {
            SubsetOf: (S, T, U);
            Tags: (TS, TT, TU);
            Index: h, htemp;
            Definition: {
                { (i,j,k) | mod(ord(i)+ord(j)+ord(k),3) = 1 }
            }
        }
        Set D {
            SubsetOf: C;
            Index: g, gtemp;
        }
        Set DD {
            SubsetOf: C;
        }
        Set E {
            SubsetOf: (S, Integers, Integers);
            Tags: (tg1, tg2, tg3);
            Index: i_e;
            Parameter: ep_e;
        }
        Parameter A {
            IndexDomain: i;
            Definition: ord(i);
        }
        Parameter P {
            IndexDomain: h;
        }
        Parameter p1 {
            IndexDomain: h;
            Definition: A(h.ts);
            Comment: {
                "A(h.ts)
                A(epTag_C_TS(h))"
            }
        }
        Parameter PD {
            IndexDomain: g;
        }
        Parameter V1 {
            Definition: sum( h, P(h) );
        }
        Parameter dte {
            IndexDomain: (i_e);
        }
        ElementParameter epC {
            Range: C;
            Comment: {
                "\"shadow_epC := first( iMS2_C2 | cssrl::w_C(epC,iMS_C2) )
                range C --> sSetMappingSet_C\";"
            }
        }
        ElementParameter epC2 {
            IndexDomain: i;
            Range: C;
            Comment: {
                "cssrl::Shadow_P(iMS_C) := sum( h | cssrl::w_C(h,iMS_C), ::P(h) );
                shadow_epC2(i) := first( iMS2_C2 | cssrl::w_C( ::epC2(i), iMS_C2) )
                range: C --> sSetMappingSet_C"
            }
        }
        ElementParameter epC3 {
            IndexDomain: (h);
            Range: C;
            Comment: {
                "cssrl::Shadow_P(iMS_C) := sum( h | cssrl::w_C(h,iMS_C), ::P(h) );
                shadow_epC3(iMS_C) := first( iMS2_C2 | cssrl::w_C(epC3(h),iMS_C2) );
                range: C --> sSetMappingSet_C"
            }
        }
        ElementParameter epC4 {
            IndexDomain: (h);
            Range: S;
            Comment: {
                "cssrl::Shadow_P(iMS_C) :=  ::P(    epMapBack( ims_C ) );
                shadow_epC4(ims_C)     :=  ::epC4( epMapBack( ims_C ) );"
            }
        }
        Set sIC {
            IndexDomain: i;
            SubsetOf: C;
            Comment: "subset of: C --> sSetMappingSet_C";
        }
    }
    Procedure generateInputcase {
        Body: {
            S := ElementRange( 1, 5, prefix:"s" );
            T := ElementRange( 1, 4, prefix:"t" );
            U := ElementRange( 1, 3, prefix:"u" );
            R := { (i,j,k) | mod(ord(i)+ord(j)+ord(k),3) = 1 };
            !!C := { (i,j,k) | (i,j,k) in R };
            D := { h | mod(ord(h),3) = 0 } ;
            DD := { h | mod(ord(h),3) = 1 } ;
            P(h) := ord(h);
            PD(g) := ord(g);
            epC := Element(C,5);
            epC2(i) := Element(C,ord(i)+3);
            siC(i) := { Element(c,ord(i)+5), Element(c,ord(i)) } ;
            E := data { (s1, 1, 2), (s2, 2, 3 )};
            dte := data { (s1, 1, 2): 3, (s2, 2, 3): 4 };
            
            md::p01(md::ie, md::i_f) := 1 onlyif ( uniform(11,19) > 16 );
            md::pcd(md::iEF) := round(uniform(11,19));
            
            md::emi::sAnimals := data { Monkey, Sparrow } ;
            md::emi::sFruits := data { Banana, Strawberry } ;
            md::emi::sFood := data { (Monkey, Banana), (Monkey, Strawberry), (Sparrow, Strawberry) };
            md::emi::qqq := data  { (Monkey, Banana) :324, (Monkey, Strawberry) : 478, (Sparrow, Strawberry): 876 };
            
            block where single_column_display := 1 ;
            	write Running_example_input_declarations to file "inputval.txt" ;
            	write md::Running_example_library_input_declarations to file "inputval.txt" in merge mode ;
            	write md::EvenMoreIdentifiers to file "inputval.txt" in merge mode ;
            endblock ;
        }
    }
    Section Attic {
        Procedure MainInitialization {
            Comment: "Add initialization statements here that do NOT require any library being initialized already.";
        }
        Procedure PostMainInitialization {
            Comment: {
                "Add initialization statements here that require that the libraries are already initialized properly,
                or add statements that require the Data Management module to be initialized."
            }
        }
        Procedure MainExecution {
            Body: {
                for IndexIdentifiers | IndexIdentifiers in Library_MoreData do
                	spPre := dcsu::fncGetPrefixForIdentifier( IndexIdentifiers );
                	display IndexIdentifiers, spPre, "-----------" ;
                endfor;
            }
            StringParameter spPre;
        }
        Procedure PreMainTermination {
            Body: {
                return  1;
            }
            Comment: {
                "Add termination statements here that require all libraries to be still alive.
                Return 1 if you allow the termination sequence to continue.
                Return 0 if you want to cancel the termination sequence."
            }
        }
        Procedure MainTermination {
            Body: {
                return 1;
            }
            Comment: {
                "Add termination statements here that do not require all libraries to be still alive.
                Return 1 to allow the termination sequence to continue.
                Return 0 if you want to cancel the termination sequence.
                It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
            }
        }
    }
}
