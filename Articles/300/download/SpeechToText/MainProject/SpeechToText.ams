## ams_version=1.0

Model Main_SpeechToText {
	DeclarationSection Declaration_data {
		Set s_Integers {
			SubsetOf: Integers;
			Index: i0, i1, i2, i3, i4;
		}
		StringParameter sp_final {
			IndexDomain: i0;
		}
		Parameter p_confidence {
			IndexDomain: (i0,i1);
		}
		StringParameter sp_transcript {
			IndexDomain: (i0,i1);
		}
		Parameter p_ResultIndex;
		Set s_MsgNO {
			SubsetOf: Integers;
			Index: i_msg;
		}
		StringParameter sp_mgs {
			IndexDomain: i_msg;
		}
		StringParameter sp_FinalTranscript {
			Definition: sum( (i0,i1), sp_transcript(i0, i1) );
		}
	}
	DeclarationSection Declaration_http_call {
		Parameter P_responseCode;
		StringParameter SP_Coption {
			IndexDomain: op;
		}
		Set S_Clientop {
			Index: op;
			Definition: DATA {requestTimeout};
		}
		StringParameter SP_requestId;
		StringParameter SP_requestURI;
		StringParameter SP_myHttpHeaders {
			IndexDomain: web::httpHeader;
		}
		StringParameter SP_responseFileName;
		StringParameter SP_requestFileName;
		StringParameter SP_apikey;
		StringParameter SP_authorization;
	}
	Procedure pr_uploadSpeech {
		Arguments: (FileLocation,StatusCode,StatusDescription);
		Body: {
			block 
				sp_FileUploadLocation := webui::GetIOFilePath(FileLocation);
				! The file is uploaded to the process specific temporary folder. 
			
				pr_FromSpeechToText( sp_FileUploadLocation );
				pr_ReadJSON();
			
				FileDelete(sp_FileUploadLocation); ! Remove the file in the temporary folder.
			
				StatusCode := webui::ReturnStatusCode('OK');
				StatusDescription := "OK";
			onerror ep_err do
				StatusCode := webui::ReturnStatusCode('ERROR');
				StatusDescription := "Error uploading speech file " + FileLocation + ": " + errh::Message( ep_err );
			endblock ;
		}
		StringParameter FileLocation {
			Property: Input;
		}
		Parameter StatusCode {
			Property: Output;
		}
		StringParameter StatusDescription {
			Property: Output;
		}
		StringParameter sp_FileUploadLocation;
		ElementParameter ep_err {
			Range: errh::PendingErrors;
		}
	}
	Procedure pr_FromSpeechToText {
		Arguments: (SP_requestFileName);
		Body: {
			! indicate source and destination file
			!SP_requestFileName := "Space Shuttle Enterprise.mp3";
			if not SP_requestFileName then
				raise error "No request filename.";
			endif ;
			SP_responseFileName := "Answer.json";
			if not SP_apikey then
				raise error "no api key provided." ;
				! SP_apikey:="YOUR_API_KEY";
			endif ;
			
			!given on the IBMCloud website
			SP_requestURI := "https://gateway-lon.watsonplatform.net/speech-to-text/api/v1/recognize?continuous=true";
			
			web::request_create(SP_requestId);
			web::request_setURL(SP_requestId, SP_requestURI);
			web::request_setMethod(SP_requestId, "POST");
			web::request_getHeaders(SP_requestId, SP_myHttpHeaders);
			!Authentification for the server
			web::base64_encode( "apikey" + ":" + SP_apikey, SP_authorization);
			SP_myHttpHeaders[ 'Authorization' ] := "Basic " + SP_authorization;
			web::request_setHeaders(SP_requestId, SP_myHttpHeaders);
			web::request_setRequestBody(SP_requestId, 'File', SP_requestFileName);
			web::request_setResponseBody(SP_requestId, 'File', SP_responseFileName);
			web::request_getOptions(SP_requestId,SP_Coption);
			SP_Coption['requestTimeout'] := "50"; 
			web::request_setOptions(SP_requestId, SP_Coption);
			web::request_invoke(SP_requestId, P_responseCode);
		}
		StringParameter SP_requestFileName {
			Property: Input;
		}
	}
	Procedure pr_ReadJSON {
		Body: {
			empty Declaration_data ;
			dex::AddMapping("map", "map.xml");
			dex::ReadFromFile(
				dataFile         :  "Answer.json", 
				mappingName      :  "map", 
				emptyIdentifiers :  0, 
				resetCounters    :  1);
		}
	}
	Procedure pr_ReadAPIKey {
		Body: {
			if pro::GetPROEndPoint() then
				pro::RetrieveFileFromCentralStorage(
					storagePath :  "/UserData/" + pro::GetPROEnvironment() + 
					               "/" + pro::GetPROUserName() + 
					               "/" + pro::ModelName + 
					               "/" + pro::ModelName + ".apikey", 
					localPath   :  "speechToText.apikey");
				read from file "speechToText.apikey" ;
				FileDelete( "speechToText.apikey" );
			else
				read from file "../speechToText.apikey" ;
			endif ;
		}
	}
	Section Application_initialization_execution_and_termination {
		Procedure MainInitialization;
		Procedure PostMainInitialization {
			Body: {
				empty Declaration_data ;
				pr_ReadAPIKey();
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1 ;
			}
		}
		Procedure MainTermination {
			Body: {
				return 1 ;
			}
		}
	}
}
